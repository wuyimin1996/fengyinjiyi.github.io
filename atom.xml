<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Space</title>
  
  <subtitle>知识的记录、记忆的保存</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.xujunjie-cv.com/"/>
  <updated>2018-12-10T07:31:56.208Z</updated>
  <id>https://www.xujunjie-cv.com/</id>
  
  <author>
    <name>埃菲尔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 项目（二）整合Druid数据库连接池</title>
    <link href="https://www.xujunjie-cv.com/Spring%20Boot%20%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B4%E5%90%88Druid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0.html"/>
    <id>https://www.xujunjie-cv.com/Spring Boot 项目（二）整合Druid数据库连接池.html</id>
    <published>2018-12-10T03:50:00.000Z</published>
    <updated>2018-12-10T07:31:56.208Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#8195;&#8195;Druid 是一个数据连接池，是阿里巴巴的一个开源项目，整个项目由数据库连接池、插件框架和SQL解析器组成。同名还有一个<a href="http://druid.io/" target="_blank" rel="noopener">大数据分析系统</a>，也叫Druid，需要区分一下。<br>&#8195;&#8195;本文记录 Spring Boot 项目整合 Druid 数据库连接池。<br><img src="https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-12-10/springboot_druid.jpg" alt="Spring Boot"><a id="more"></a></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>&#8195;&#8195;在 Spring Boot 项目中的maven配置文件中引入依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库连接池用的是阿里巴巴的druid，结合了c3p0、dbcp等其他连接池的优点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>&#8195;&#8195;1、在项目配置文件<code>application.yml</code>(或者<code>application.properties</code>)中配置连接池：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://yourIP:yourPort/demo?useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">yourUsername</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">yourPassword</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">    initialSize:</span> <span class="number">5</span> <span class="comment">#初始化数量</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span> <span class="comment">#最大连接等待超时时间</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span> <span class="comment">#打开PSCache</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span> <span class="comment">#并且指定每个连接PSCache的大小</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">20</span> <span class="comment">#最大活跃数</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat,wall</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;2、在 Spring Boot 的配置文件夹中添加<code>DruidConfig.java</code>：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aifeier.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String connectionProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minIdle;</span><br><span class="line">    <span class="keyword">private</span> String validationQuery;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWait;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> poolPreparedStatements;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolPreparedStatementPerConnectionSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnBorrow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testWhileIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minEvictableIdleTimeMillis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeBetweenEvictionRunsMillis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnReturn;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;</span><br><span class="line">    <span class="keyword">private</span> String filters;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>     <span class="comment">//声明其为Bean实例</span></span><br><span class="line">    <span class="meta">@Primary</span>  <span class="comment">//在同样的DataSource中，首先使用被标注的DataSource</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setDbType(type);</span><br><span class="line">        dataSource.setMinIdle(minIdle);</span><br><span class="line">        dataSource.setValidationQuery(validationQuery);</span><br><span class="line">        dataSource.setInitialSize(initialSize);</span><br><span class="line">        dataSource.setMaxWait(maxWait);</span><br><span class="line">        dataSource.setPoolPreparedStatements(poolPreparedStatements);</span><br><span class="line">        dataSource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);</span><br><span class="line">        dataSource.setTestOnBorrow(testOnBorrow);</span><br><span class="line">        dataSource.setTestWhileIdle(testWhileIdle);</span><br><span class="line">        dataSource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);</span><br><span class="line">        dataSource.setTimeBetweenConnectErrorMillis(timeBetweenEvictionRunsMillis);</span><br><span class="line">        dataSource.setTestOnReturn(testOnReturn);</span><br><span class="line">        dataSource.setMaxActive(maxActive);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource.setFilters(filters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        dataSource.setConnectionProperties(connectionProperties);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个StatViewServlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">DruidStatViewServle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// org.springframework.boot.context.embedded.ServletRegistrationBean提供类的进行注册.</span></span><br><span class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        <span class="comment">// 添加初始化参数：initParams</span></span><br><span class="line">        <span class="comment">// 白名单：</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">"allow"</span>, <span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">// IP黑名单 (存在共同时，deny优先于allow) : 如果满足deny的话提示:Sorry, you are not</span></span><br><span class="line">        <span class="comment">// permitted to view this page.</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">"deny"</span>, <span class="string">"192.168.1.73"</span>);</span><br><span class="line">        <span class="comment">// 登录查看信息的账号密码.</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">// 是否能够重置数据.</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">"resetEnable"</span>, <span class="string">"false"</span>);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个：filterRegistrationBean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">druidStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建过滤器</span></span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        <span class="comment">//设置过滤器过滤路径</span></span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="comment">//忽略过滤的形式</span></span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>,</span><br><span class="line">                <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;到这Druid的配置算是完了，要是想进入Druid后台查看监控数据，可以启动项目后在浏览器里输入网址打开 <code>http://127.0.0.1:8080/druid/</code> 进行访问，登录名和密码在上面的DruidConfig.java中进行配置：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录查看信息的账号密码.</span></span><br><span class="line">servletRegistrationBean.addInitParameter(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">servletRegistrationBean.addInitParameter(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;Druid 是一个数据连接池，是阿里巴巴的一个开源项目，整个项目由数据库连接池、插件框架和SQL解析器组成。同名还有一个&lt;a href=&quot;http://druid.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;大数据分析系统&lt;/a&gt;，也叫Druid，需要区分一下。&lt;br&gt;&amp;#8195;&amp;#8195;本文记录 Spring Boot 项目整合 Druid 数据库连接池。&lt;br&gt;&lt;img src=&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-12-10/springboot_druid.jpg&quot; alt=&quot;Spring Boot&quot;&gt;
    
    </summary>
    
      <category term="后端" scheme="https://www.xujunjie-cv.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://www.xujunjie-cv.com/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
      <category term="Spring" scheme="https://www.xujunjie-cv.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.xujunjie-cv.com/tags/Spring-Boot/"/>
    
      <category term="Druid" scheme="https://www.xujunjie-cv.com/tags/Druid/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目（一）整合 Mybatis Plus</title>
    <link href="https://www.xujunjie-cv.com/Spring%20Boot%20%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E6%95%B4%E5%90%88%20Mybatis%20Plus.html"/>
    <id>https://www.xujunjie-cv.com/Spring Boot 项目（一）整合 Mybatis Plus.html</id>
    <published>2018-12-06T07:22:00.000Z</published>
    <updated>2018-12-10T06:14:05.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#8195;&#8195;Spring 项目结合 Spring Boot 框架来搭建后台是目前比较主流的技术，不仅简化了配置文件，也让 Spring 使用起来更加方便。<br>&#8195;&#8195;Spring Boot 整合 MyBatis-Plus （基于Mybatis的第三方持久层框架）让数据操作更加简单、优雅。<br><img src="https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-12-6/springboot_baomidou.jpg" alt="Spring Boot"><a id="more"></a></p><h2 id="简单介绍一下"><a href="#简单介绍一下" class="headerlink" title="简单介绍一下"></a>简单介绍一下</h2><p>&#8195;&#8195;先给出官方的介绍：<br></p><div class="note default"><p><a href="https://mp.baomidou.com/" target="_blank" rel="noopener">MyBatis-Plus</a>（简称 MP）是一个 MyBatis(<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a>) 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p></div>&#8195;&#8195;Mybatis-Plus 主要也是为了简化 Mybatis 的开发，比如单纯使用 Mybatis 去进行数据增删改查甚至更复杂的数据操作需要创建很多xml文件，写很多 SQL 代码，如果项目小点还好，要是中大型项目，这么多的 xml 以及密密麻麻的 SQL 代码维护起来着实让人头疼，我自己的大学毕业设计就是一个很好的例子。而 Mybatis-Plus 呢，将很多 CRUD 数据操作方法进行整合封装，在service、servicImpl、mapper、xml等方面都大大减少了代码量，还有 Mybatis-Plus 的代码生成器也设计得比较好，几乎不用我们手动去创建刚刚说的这些文件包括Entity实体类。Mybatis-Plus 还有热加载、代码生成、分页、性能分析等功能一应俱全。<br>&#8195;&#8195;不说了，能动手就别唠叨！<p></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>&#8195;&#8195;目前 Mybatis-Plus 已经到了3.0.6版本，官方指明MP(Mybatis-Plus缩写)3.0要求 JDK 版本要在8以上。<br>&#8195;&#8195;首先需要创建Spring Boot 项目，IDEA 已经集成了 Spring Initializr 工具，可以快速创建 Spring Boot 项目，默认已经引入了Spring Boot Staeter 父工程，要不是快速创建的项目，需要先引入 Spring Boot Staeter 父工程：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;然后引入 <code>spring-boot-starter</code>、<code>spring-boot-starter-test</code>、<code>mybatis-plus-boot-starter</code>、<code>lombok</code>、<code>mysql</code>、<code>druid</code> 依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring 核心模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring 测试模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果需要可以引入Spring Web 模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Lombok可以减少很多重复代码的书写，比如说getter/setter/toString等方法的编写，还有日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis-Plus 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySql 依赖，maven库有更高版本如8.0，这里用5.1.22 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池用的是阿里巴巴的druid，结合了c3p0、dbcp等其他连接池的优点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>&#8195;&#8195;项目文件结构目录如下：<br><img src="https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-12-6/2018-12-7_15_39.png" alt="Spring Boot"><br>&#8195;&#8195;快速构建的Spring Boot的配置文件一般是<code>application.properties</code>的properties格式文件，可以自行修改文件后缀为yml，不改也可以。在<code>application.yml</code>中配置如下：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://yourIP:yourPort/yourDatabase</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">yourUsername</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">yourPassword</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">    initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat,wall</span></span><br></pre></td></tr></table></figure><p></p><p>##<br>&#8195;&#8195;用本地Mysql创建本地连接，再新建一个数据库(名称为demo)，然后新建一张数据库(名称为users)，添加字段如下：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">2</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = <span class="keyword">Compact</span>;</span><br></pre></td></tr></table></figure><p></p><h2 id="创建实体类、service、mapper"><a href="#创建实体类、service、mapper" class="headerlink" title="创建实体类、service、mapper"></a>创建实体类、service、mapper</h2><p>&#8195;&#8195;编写实体类 UserEntity.java，如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aifeier.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"users"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;编写 IUserService.java 接口如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aifeier.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aifeier.demo.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;编写 UserServiceImpl.java 实现类接口如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aifeier.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aifeier.demo.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.aifeier.demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.aifeier.demo.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">UserEntity</span>&gt; <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;编写 UserMapper.java 接口如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aifeier.demo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aifeier.demo.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>&#8195;&#8195;接下来直接在test测试单元中直接进行测试，在 DemoApplicationTests.java 中添加如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aifeier.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aifeier.demo.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.aifeier.demo.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserEntity user = <span class="keyword">new</span> UserEntity();</span><br><span class="line">        user.setUsername(<span class="string">"埃菲尔"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = iUserService.save(user);</span><br><span class="line">        System.out.println(flag ? <span class="string">"添加成功"</span> : <span class="string">"添加失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;运行单元测试就能看到控制台输出“添加成功”。</p><h2 id="自行编写SQL"><a href="#自行编写SQL" class="headerlink" title="自行编写SQL"></a>自行编写SQL</h2><p>&#8195;&#8195;开发中当然光靠Mybatis-Plus 中封装好的 CRUD 方法是不够的，有时有一些复杂需求需要自行编写SQL来获取数据，比如有时候需要在插入一条记录后同时返回插入记录的id主键值，那下面就实现这一需求。<br>&#8195;&#8195;首先在配置文件目录中<code>resources</code>中新建mybatis文件夹，在mybatis文件夹里新建mapper文件夹，在mapper文件夹中新建<code>UserMapper.xml</code>，内容如下：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.aifeier.demo.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertResultId"</span> <span class="attr">parameterType</span>=<span class="string">"UserEntity"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      INSERT INTO users(username,sex,age) VALUES(#&#123;username&#125;,#&#123;sex&#125;,#&#123;age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;文件目录在上面截图上可见。在<code>application.yml</code>中配置<code>mybatis-plus</code>,如下：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mybatis</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:/mybatis/mapper/*.xml</span></span><br><span class="line"><span class="attr">  typeAliasesPackage:</span> <span class="string">com.aifeier.demo.entity</span> <span class="comment">#实体扫描，多个package用逗号或者分号分隔</span></span><br><span class="line"><span class="attr">  config-locations:</span> <span class="attr">classpath:/mybatis/mybatis-config.xml</span></span><br><span class="line"><span class="attr">  global-config:</span></span><br><span class="line">    <span class="comment">#刷新mapper 调试神器</span></span><br><span class="line"><span class="attr">    db-config:</span></span><br><span class="line"><span class="attr">      id-type:</span> <span class="string">id_worker</span> <span class="comment">#主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";</span></span><br><span class="line"><span class="attr">      field-strategy:</span> <span class="string">not_empty</span> <span class="comment">#字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"</span></span><br><span class="line"><span class="attr">      column-underline:</span> <span class="literal">true</span> <span class="comment">#驼峰下划线转换</span></span><br><span class="line">      <span class="comment">#capital-mode: true #数据库大写下划线转换</span></span><br><span class="line"><span class="attr">      logic-delete-value:</span> <span class="string">Y</span> <span class="comment">#逻辑删除配置</span></span><br><span class="line"><span class="attr">      logic-not-delete-value:</span> <span class="string">N</span></span><br><span class="line"><span class="attr">      db-type:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    refresh:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#自定义填充策略接口实现</span></span><br><span class="line">    <span class="comment">#meta-object-handler: com.baomidou.springboot.xxx</span></span><br><span class="line">    <span class="comment">#自定义SQL注入器</span></span><br><span class="line">    <span class="comment">#sql-injector: com.baomidou.springboot.xxx</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    cache-enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这是声明mapper接口文件所对应的xml位置以及mybatis的一些配置文件。然后修改IUserService.java，如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">insertResultId</span><span class="params">(UserEntity userEntity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;修改UserServiceImpl.java，如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">UserEntity</span>&gt; <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insertResultId</span><span class="params">(UserEntity userEntity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insertResultId(userEntity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;修改UserMapper.java，如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">insertResultId</span><span class="params">(UserEntity userEntity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;好了，接下来可以再测试类中编写测试代码，如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UserEntity user = <span class="keyword">new</span> UserEntity();</span><br><span class="line">        user.setUsername(<span class="string">"埃菲尔小号"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line"><span class="comment">//        boolean flag = iUserService.save(user);</span></span><br><span class="line"><span class="comment">//        System.out.println(flag ? "添加成功" : "添加失败");</span></span><br><span class="line">        iUserService.insertResultId(user);</span><br><span class="line">        System.out.println(<span class="string">"返回的id为："</span> + user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;完成，运行后能返回插入记录的id。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>&#8195;&#8195;MybatisPlusConfig.java这个配置文件主要是一些Mybatis-Plus的Bean注入，例如配置 datasource， sqlSessionFactory, transaction manager 等等，晒一下简单的配置，仅供参考：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aifeier.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一些配置， 例如，配置 datasource， sqlSessionFactory, transaction manager 等等</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相当于顶部的：</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> <span class="doctag">@MapperScan</span>("com.baomidou.cloud.service.*.mapper*")&#125;</span></span><br><span class="line"><span class="comment">     * 这里可以扩展，比如使用配置文件来配置扫描Mapper的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MapperScannerConfigurer scannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        scannerConfigurer.setBasePackage(<span class="string">"com.baomidou.cloud.service.*.mapper*"</span>);</span><br><span class="line">        <span class="keyword">return</span> scannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQL执行效率插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;Spring 项目结合 Spring Boot 框架来搭建后台是目前比较主流的技术，不仅简化了配置文件，也让 Spring 使用起来更加方便。&lt;br&gt;&amp;#8195;&amp;#8195;Spring Boot 整合 MyBatis-Plus （基于Mybatis的第三方持久层框架）让数据操作更加简单、优雅。&lt;br&gt;&lt;img src=&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-12-6/springboot_baomidou.jpg&quot; alt=&quot;Spring Boot&quot;&gt;
    
    </summary>
    
      <category term="后端" scheme="https://www.xujunjie-cv.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://www.xujunjie-cv.com/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
      <category term="Spring" scheme="https://www.xujunjie-cv.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.xujunjie-cv.com/tags/Spring-Boot/"/>
    
      <category term="Mybatis-Plus" scheme="https://www.xujunjie-cv.com/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>移动端 Web 页面调试器 vConsole</title>
    <link href="https://www.xujunjie-cv.com/%E7%A7%BB%E5%8A%A8%E7%AB%AF-Web-%E9%A1%B5%E9%9D%A2%E8%B0%83%E8%AF%95%E5%99%A8%20vConsole.html"/>
    <id>https://www.xujunjie-cv.com/移动端-Web-页面调试器 vConsole.html</id>
    <published>2018-12-05T02:35:00.000Z</published>
    <updated>2018-12-05T03:56:51.214Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#8195;&#8195;目前移动端Web开发越来越大众普遍，越来越多的前段框架技术都支持移动端兼容和适配，但是不得不说，移动端开发过程中要在手机上调试真的很麻烦，毕竟手机浏览器不能像在 PC 上一样，直接F12就弹出调试器，看到我们再控制台输出的调试信息，有时万般无奈只能使用alert来输出，这真是一个痛点！<br>&#8195;&#8195;腾讯的 vConsole 插件能帮我们解决这个问题！<br><a id="more"></a></p><h2 id="下载-安装"><a href="#下载-安装" class="headerlink" title="下载 安装"></a>下载 安装</h2><p>&#8195;&#8195;首先需要下载 vConsole 的<a href="https://github.com/Tencent/vConsole/releases/tag/v3.2.0" target="_blank" rel="noopener">最新版本</a>，或者直接使用 <code>npm</code> 安装：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vconsole</span><br></pre></td></tr></table></figure><p></p><p>然后复制 <code>dist/vconsole.min.js</code> 到自己的项目中。接着就是将这个插件引入到项目中：<br>&#8195;&#8195;1、使用 script 来直接直接引入 vConsole 模块。单页面应用直接在入口Html文件的 <code>&lt;hean&gt;&lt;/hean&gt;</code> 中引入：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/vconsole.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vConsole = <span class="keyword">new</span> VConsole();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;注意：这里的<code>path/to/</code>指的是vconsole.min.js文件的路径，多页面应用要在需要进行调试的每个页面都引入。<br>&#8195;&#8195;2、在入口js文件中使用 <code>require()</code> 引入模块：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> VConsole = <span class="built_in">require</span>(<span class="string">'path/to/vconsole.min.js'</span>);</span><br><span class="line"><span class="keyword">var</span> vConsole = <span class="keyword">new</span> VConsole();</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;上面第一行代码只是引入了vConsole的原型，并不会直接在页面插入调试器，需要第二行代码来实例化一个VConsole对象才可以，所以注意，一定要手动进行实例化。<br>&#8195;&#8195;3、如果是在Vue-cli项目里，那先安装vConsole到dependencies中 <code>npm install vconsole</code> ，然后在main.js中引入：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vConsole <span class="keyword">from</span> <span class="string">'vconsole'</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;按照上面的方法就可以再移动端进行调试了，需要更加详细地了解vConsole，可以去GitHub上看<a href="https://github.com/Tencent/vConsole/blob/dev/doc/tutorial_CN.md" target="_blank" rel="noopener">文档</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;目前移动端Web开发越来越大众普遍，越来越多的前段框架技术都支持移动端兼容和适配，但是不得不说，移动端开发过程中要在手机上调试真的很麻烦，毕竟手机浏览器不能像在 PC 上一样，直接F12就弹出调试器，看到我们再控制台输出的调试信息，有时万般无奈只能使用alert来输出，这真是一个痛点！&lt;br&gt;&amp;#8195;&amp;#8195;腾讯的 vConsole 插件能帮我们解决这个问题！&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="https://www.xujunjie-cv.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="调试" scheme="https://www.xujunjie-cv.com/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="vConsole" scheme="https://www.xujunjie-cv.com/tags/vConsole/"/>
    
  </entry>
  
  <entry>
    <title>Vuex 用法总结</title>
    <link href="https://www.xujunjie-cv.com/Vuex-%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93.html"/>
    <id>https://www.xujunjie-cv.com/Vuex-用法总结.html</id>
    <published>2018-12-01T14:14:00.000Z</published>
    <updated>2018-12-06T07:03:00.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#8195;&#8195;很早就开始使用Vue框架了，一直没有用到Vuex，也是最近才开始学着使用Vuex进行全局的状态管理，不得不说，是真的好用。<br>&#8195;&#8195;百度一下就能找到Vuex的官方文档，介绍的很官方化，可就是因为太官方化了，开始学习的时候总是看的似懂非懂，相信很多人也会有这样的感觉，所以博主将Vuex以自己所理解的程度来用自己的话简单记录一下使用方法。对于资深的前端大神们，要是愿意对本文提出意见，当然最好。<br><img src="https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/vuex.jpg" alt="图片走丢了"><a id="more"></a></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>&#8195;&#8195;先说说Vuex是个什么东西吧。先给大家一个<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">官方文档传送门</a>，官方是这样介绍的：<br></p><div class="note default"><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p></div><p></p><p>&#8195;&#8195;意思就是 Vuex 是一个 Vue 程序的状态管理器，对 Vue 中的一些进行及时更新。我们在项目会使用全局变量来存储一些频繁被使用的信息，比如用户信息、购物车信息等等，这些信息存在全局中随时取用，比起每次去网络请求数据会更加方便、高效。Vue 应用中也会需要用到全局变量来管理一些全局信息，Vuex就是这么一个东东。 不仅如此，Vuex 中管理的状态，一旦改变，可以及时渲染到整个应用中。</p><h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>根据官方的文档描述，引用方式有两种，一种就是直接引用全局 Script 的文件，但是要注意必须 Vuex 要在 Vue 引用之后再引用，如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/path/to/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"/path/to/vuex.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><p><font color="red">注意：</font>上面应用地址<code>/path/to</code>只是样例，真正的地址是 <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue</a> 和 <a href="https://vuex.vuejs.org/zh/installation.html" target="_blank" rel="noopener">Vuex</a> 的 CDN ，官网上都有。<br>&#8195;&#8195;若是在一个模块化的打包系统中，需要显式地通过 <code>Vue.use()</code> 来安装 Vuex：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><p></p><p>一般都会用第二种方法，不过需要先进行 <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue</a> 和 <a href="https://vuex.vuejs.org/zh/installation.html" target="_blank" rel="noopener">Vuex</a> 的安装。</p><h3 id="基本的-Vuex-结构"><a href="#基本的-Vuex-结构" class="headerlink" title="基本的 Vuex 结构"></a>基本的 Vuex 结构</h3><p>&#8195;&#8195;Vuex 基本结构如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这是Vue-cli 搭建Vue项目时自带就生成Vuex模板(博主这里用的Vue-cli 3.0以上的版本，如果在初始化项目的时候勾选了 Vuex 组件才会有内容如上的store.js文件，位于src目录下)，单词 store 是仓库的意思，很明显，Vuex将存储全局信息的地方称之为仓库。创建好了基本的Vuex 仓库之后需要在 Vue 对象中引入它(注意：一个 Vue 项目应用中只能有一个 Vuex 仓库，足够了！)，具体是在项目入口 main.js 文件中引用，如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;如果是简单的小型项目，只需要一个<code>store.js</code>即可，毕竟没有太多信息量需要全局管理，若是中大型项目，可以新建一个store文件夹，里面再新建sate.js、mutation.js、actions.js、getter.js分别对应仓库的state、mutations、actions、getter，最后再新建一个index.js，<code>new Vuex.Store()</code>将这四个文件都引用进去即可。<br>&#8195;&#8195;综上所述，Vuex 其实并不是很复杂，就是一个管理 Vue 项目的全局状态信息的管理器，称为store（仓库），主要包含State、Mutation、Action三个核心部分，getter可用可不用看，看自己的项目需要。</p><h3 id="Vuex-仓库之-State"><a href="#Vuex-仓库之-State" class="headerlink" title="Vuex 仓库之 State"></a>Vuex 仓库之 State</h3><p>&#8195;&#8195;Vuex 仓库的核心部分State，官方形容是驱动应用的数据源，我的理解就是这是一个存放数据的地方，就相当于 Vue 中的data属性一样，全部的变量就放在这里，里面存放的数据是项目全局都可访问的状态信息。不多说，直接上代码！<br>&#8195;&#8195;我们在sate里设置一个数据源，就按照官网的例子来吧，设置一个变量叫count，初始值为0，如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;然后在新建两个Vue模板，分别为 ATest.vue 和 BTest.vue 就放在view目录下(这是Vue-cli 3.0以上项目才有的目录，就是视图模板的文件夹)，Vue 路由里配置这两个模板组件，怎么配置就不说了，这是 Vue 的知识，不会的请移步<a href="http://www.runoob.com/vue2/vue-install.html" target="_blank" rel="noopener">Vue菜鸟教程</a>。ATest.vue 和 BTest.vue 都用 <code></code>来输出全局状态count的值，两个模板的内容都如下：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是ATest页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>全局状态count：&#123;&#123;$store.state.count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;BTest.vue 中标题就写“这是BTest页面”。然后把项目跑起来，可以看到 ATest 和 BTest 两个视图中都能显示count的值，效果如下:<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/vuex_1.jpg" alt=""><br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/vuex_2.jpg" alt=""><br>&#8195;&#8195;要是在store仓库中修改state中的count值为10，那么这两个视图中的count也会变成10。但是这样子去写不够优雅，不够漂亮，所以下面介绍三种比较优雅的获取仓库共享值得方法。</p><p><font size="3"><strong>赋值方法一：通过computed的计算属性直接赋值</strong></font><br>&#8195;&#8195;computed是 Vue 的属性，主要用来监控所定义的变量发生变化，变量不需要在data属性中定义，只需要在computed中定义，然后就可以在页面上进行双向数据绑定进行页面渲染，还有就是computed属性可以在变量输出前就对其值进行改变，那我们就用这个方法来将store.js中的state里的值赋值给data。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  count () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后将模板中的 <code>$store.state.count</code> 改成 <code>count</code>，再运行项目发现也是能取到值。</p><p><font size="3"><strong>赋值方法二：在computed中通过mapState的对象来赋值</strong></font><br>&#8195;&#8195;mapState是一个 Vuex 的辅助函数，直接上代码。首先我们需要引用mapState。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;然后还在computed计算属性里写如下代码：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState(&#123;</span><br><span class="line">  count: <span class="function"><span class="params">state</span> =&gt;</span> state.count <span class="comment">// 此处使用EC6的箭头函数语法，理解为传入state对象，返回state.count属性</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;上面用的ES6的箭头函数语法，不了解可以先去百度了解一下，不是很难，就是换了一种函数的写法，显得比较简洁优化、高端大气。</p><p><font size="3"><strong>赋值方法三：在computed中通过mapState的数组来赋值</strong></font><br>&#8195;&#8195;其实3种赋值的方法都是在computed中进行，只是一个比一个更加简洁、优雅。这种方法也是用mapState辅助函数，但是更加简单，如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([<span class="string">"count"</span>]) <span class="comment">//映射this.count 为 store.state.count</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这样也可以拿到state的值，大多都是用这种方法。</p><h3 id="Vuex-仓库之-Mutation"><a href="#Vuex-仓库之-Mutation" class="headerlink" title="Vuex 仓库之 Mutation"></a>Vuex 仓库之 Mutation</h3><p>&#8195;&#8195;State 就像是 Vue 里的data属性一样用来存放变量，那么 Mutation 就好比是 Vue 中的methods一样，用来存放方法，只要是用于更改store仓库里的变量唯一放方法就是用 Mutation。先给出一段官方的介绍：<br></p><div class="note default"><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。</p></div><br>&#8195;&#8195;Mutation的使用就是提交一个commit指令来告诉 Vuex 要使用哪个方法来进行对变量进行操作，基本语法是<code>$store.commit(String methos)</code>，先来一个简单的样例代码，在ATest.vue的Html部分加上两个按钮事件，完整代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是ATest页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>全局状态count：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('add')"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('reduce')"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>store.js中再修改mutation属性：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  add (state) &#123;</span><br><span class="line">    state.count += <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  reduce (state) &#123;</span><br><span class="line">    state.count -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;运行项目，发现点击按钮就会进行相应的加减操作，在ATest视图操作完了可以跳转去BTest瞧瞧count是不是也相应的改变了。在<code>commit()</code>方法中不仅可以传方法名，也能传入一个参数，通过我们所传入的值来进行加减。具体代码如下：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是ATest页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>全局状态count：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('add',5)"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('reduce',5)"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>store.js中再修改mutation属性：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  add (state,n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;,</span><br><span class="line">  reduce (state,n) &#123;</span><br><span class="line">    state.count -= n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这样传入是多少，就是进行多少的加减操作。上面说到State有辅助函数mapState，方便对变量的取值，Vuex 倒也是不偏心，Mutations也有辅助函数mapMutations。</p><p><font size="3"><strong>通过mapMutations模板获取Mutations方法</strong></font><br>&#8195;&#8195;实际开发中当然不希望每次提交commit都直接在button的click事件中进行，而mapMutations辅助函数能直接让button的点击事件指向方法名，就像<code>@click=&quot;add&quot;</code>，实现如下：<br>&#8195;&#8195;1、先引用辅助函数mapState:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;然后在 Vue 的methosd属性中添加mapMutations：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations([<span class="string">'add'</span>,<span class="string">'reduce'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;mapMutations中的数组内的每一个项值就相当于方法名，这样就可以直接在点击事件指向方法名，就像这样：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reduce"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="Vuex-仓库之-Actions"><a href="#Vuex-仓库之-Actions" class="headerlink" title="Vuex 仓库之 Actions"></a>Vuex 仓库之 Actions</h3><p>&#8195;&#8195;Actions其实就是Mutations的升级版，因为他们的功能基本一样，只不过和 Mutations 不一样的是，Actions 是异步的，而 Mutations 是同步的。同步就是代码必须要一行一行执行，请求必须要一个接着一个，而异步不是这样，不会因为一个请求需要延迟而让后面的代码进行等待(这是我比较浅显庸俗的理解，要是理解得不对望见谅，欢迎纠正！(′▽`〃))。所以，Actions 是可以异步改变state状态的，Mutations 一定是同步改变状态的，废话太多了，直接上代码吧！<br>&#8195;&#8195;首先在store.js中actions添加方法，这里先说明一下，Actions里的方法是可以调用Mutations里的方法的，下面把各类情况都列一下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  add_100 (&#123; state &#125;) &#123;</span><br><span class="line">    state.count += <span class="number">100</span> <span class="comment">// 此方法就是将count加100, &#123;state&#125;就是仓库的数据源</span></span><br><span class="line">  &#125;,</span><br><span class="line">  add_call (context) &#123;</span><br><span class="line">    context.commit(<span class="string">'add'</span>) <span class="comment">// 此方法调用了Mutations中的add方法，content是上下文，其实就是这个store</span></span><br><span class="line">  &#125;,</span><br><span class="line">  reduce_call (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'reduce'</span>) <span class="comment">// 此方法调用了Mutations中的reduce方法， &#123;commit&#125;是直接把commit对象传递归来</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;上面三个方法都是actions里声明的方法，对应参数的解释都写在注释里面了。然后在事件中引用，这个时候不能用<code>$store.commit(String methos)</code> 来引用 actions 方法，因为这个引用方式只适用于 mutations ，引用 actions 需要这样<code>$store.dispatch(String methos)</code>来引入：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('add_100')"</span>&gt;</span>对count进行+100操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('add_call')"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('reduce_call')"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;既然 State 和 Mutations 都有辅助函数，那 Action 也一定有，毕竟都是 Vuex 的“孩子”，手心手背都是肉！！！同样的，我们需要先引入辅助函数mapAction：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br></pre></td></tr></table></figure><p></p><p>然后同样在 Vue 的 methods 方法集属性里添加辅助函数：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([<span class="string">'add_100'</span>, <span class="string">'add_call'</span>, <span class="string">'reduce_call'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;最后在Html部分修改一下button的click指向：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add_100"</span>&gt;</span>对count进行+100操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add_call"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reduce_call"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;但是现在我们在 actions 里写的都是同步的代码请求，效果和 mutation 一样，那下面我们加点东西，让 actions 展现自己存在的价值，我们在修改一下action的方法：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  add_100 (&#123; state &#125;) &#123;</span><br><span class="line">    state.count += <span class="number">100</span> <span class="comment">// 此方法就是将count加100, &#123;state&#125;就是仓库的数据源</span></span><br><span class="line">  &#125;,</span><br><span class="line">  add_call (context) &#123;</span><br><span class="line">    context.commit(<span class="string">'add'</span>) <span class="comment">// 此方法调用了Mutations中的add方法，content是上下文，其实就是这个store</span></span><br><span class="line">  &#125;,</span><br><span class="line">  reduce_call (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="comment">// commit('reduce') // 此方法调用了Mutations中的reduce方法， &#123;commit&#125;是直接把commit对象传递归来</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; commit(<span class="string">'reduce'</span>) &#125;, <span class="number">3000</span>) <span class="comment">// 因为没有现成的移步请求，测试移步最好的方法就是加定时器喽</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这一行代码比上面的reduce早执行，reduce会在3秒后执行'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;具体效果就不截图了，自行运行一下项目，打开控制台你就知道发生了什么。</p><h2 id="关于-Getter-和-Model"><a href="#关于-Getter-和-Model" class="headerlink" title="关于 Getter 和 Model"></a>关于 Getter 和 Model</h2><p>&#8195;&#8195;Vuex 的简单使用方法就这么多，其实还有getter、model两个属性没有将介绍，简单说一下吧！<br>&#8195;&#8195;getter其实就是设置 state 里的一些状态值在每次进行改变的时候都先对这个值进行一些操作的这样一个属性，比如可以在 store 中设置添加getter对count在每次进行加减时进行×10的操作，这个功能主要起到一些过滤作用。<br>&#8195;&#8195;而model呢，就是将上述所讲的state、mutations、actions、getter几个属性进行整合分类，主要用途就是在你的项目后期变得越来越大的时候，那么store里的状态值啊、方法啊都会变得越来越多，而有的状态值都是针对某些特定的业务需求的，那么就可以用model来进行分类，一个model里包含了state、mutations、actions、getter，而store仍然只能有一个，它就可以包含多个model。<br>&#8195;&#8195;这两个属性先这样简单介绍一下吧，后续我再补上其详细用法，见谅！</p><hr><p>&#8195;&#8195;来首音乐休息一下吧！<br></p><div id="aplayer-fsmdMTNq" class="aplayer aplayer-tag-marker" style="margin-bottom:20px"><pre class="aplayer-lrc-content"></pre></div><script>var ap=new APlayer({element:document.getElementById("aplayer-fsmdMTNq"),narrow:!1,autoplay:!1,showlrc:3,music:{title:"起风了",author:"买辣椒也用券",url:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/audio/%E8%B5%B7%E9%A3%8E%E4%BA%86.mp3",pic:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/poster/%E8%B5%B7%E9%A3%8E%E4%BA%86.jpg",lrc:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/lyric/%E8%B5%B7%E9%A3%8E%E4%BA%86%20-%20%E4%B9%B0%E8%BE%A3%E6%A4%92%E4%B9%9F%E7%94%A8%E5%88%B8.lrc"}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)</script><p></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;很早就开始使用Vue框架了，一直没有用到Vuex，也是最近才开始学着使用Vuex进行全局的状态管理，不得不说，是真的好用。&lt;br&gt;&amp;#8195;&amp;#8195;百度一下就能找到Vuex的官方文档，介绍的很官方化，可就是因为太官方化了，开始学习的时候总是看的似懂非懂，相信很多人也会有这样的感觉，所以博主将Vuex以自己所理解的程度来用自己的话简单记录一下使用方法。对于资深的前端大神们，要是愿意对本文提出意见，当然最好。&lt;br&gt;&lt;img src=&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/vuex.jpg&quot; alt=&quot;图片走丢了&quot;&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://www.xujunjie-cv.com/tags/vue/"/>
    
      <category term="vuex" scheme="https://www.xujunjie-cv.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Hexo音乐插件 hexo-tag-aplayer 的坑</title>
    <link href="https://www.xujunjie-cv.com/Hexo%E9%9F%B3%E4%B9%90%E6%8F%92%E4%BB%B6%20hexo-tag-aplayer%20%E7%9A%84%E5%9D%91.html"/>
    <id>https://www.xujunjie-cv.com/Hexo音乐插件 hexo-tag-aplayer 的坑.html</id>
    <published>2018-11-28T11:42:00.000Z</published>
    <updated>2018-12-05T02:09:04.529Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#8195;&#8195;博客相信现在好多技术大牛都有，例如博客园、简书、CSDN之类的大型博客网站，但是局限性蛮大的，只能按照网站的规则去写写文章，留个言什么的，要是个人博客就不一样了，可以根据自己的需要去添加任何功能。<br>&#8195;&#8195;在搭建博客时用到hexo-tag-aplayer这样一个音乐插件，可以很优雅地在H5页面中播放音乐，可以算是Hexo框架中最好的音乐插件之一了，体验效果请试听。。。<br></p><div id="aplayer-ZELVBgQr" class="aplayer aplayer-tag-marker" style="margin-bottom:20px"><pre class="aplayer-lrc-content"></pre></div><script>var ap=new APlayer({element:document.getElementById("aplayer-ZELVBgQr"),narrow:!1,autoplay:!1,showlrc:3,music:{title:"一个人的北京",author:"海鸣威",url:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/audio/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC.mp3",pic:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/poster/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC.jpg",lrc:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/lyric/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC%20-%20%E6%B5%B7%E9%B8%A3%E5%A8%81.lrc"}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)</script><br><a id="more"></a><p></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>&#8195;&#8195;使用hexo-tag-aplayer插件的时候，可以将音乐文件、封面图片放在项目的资源文件夹中，直接引用就行，但是时间长了，项目中的资源文件夹会非常大，严重影响项目的部署效果。插件可以直接引用网络路径，这样就可以将文件上传到阿里云、七牛云之类的对象存储服务器(这里说点废话，阿里云对象存储需要money，但是不是很贵，七牛云普通用户就可以享受10G的免费存储空间，其他的云平台自己百度)，然后复制粘贴文件URL就可以实现上面音乐播放器的效果。<br>&#8195;&#8195;问题在这，这个插件也可以设定歌曲的歌词，不过也需要引用歌词文件(一般都是lrc格式，也有txt格式等)，同样将歌词文件上传到相应的云平台上,然后拷贝文件路径粘贴一下，部署，发现歌词没显示出来，F12查看控制台，发现说歌词文件访问不了，存在跨域问题，绝了都！！！<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-11-28_3.jpg" alt="图片走丢了"><br>&#8195;&#8195;为啥封面图片就可以直接配置网络路径访问呢？开始没想到在云平台进行相应的设置，光在自己博客项目一顿倒腾，没整出来，简直了。<br>&#8195;&#8195;后来直接上插件的GitHub开源项目的issues讨论里面溜达一圈，希望能找到一点线索。果然，不管是我一个人有这样的问题，插件目前的维护者给出的解决办法如下：<br></p><div class="note default"><p>&#8195;&#8195;跨域限制是浏览器为了防止诸如 CSRF 等攻击所采取的安全措施，如果歌词文件是遇到跨域问题，请考虑将歌词文件放到同源网站（如 <a href="https://www.xxwhite.com" target="_blank" rel="noopener">https://www.xxwhite.com</a> ）再进行请求，或者如果有歌词文件所在服务器的权限，请在歌词文件资源返回的 HTTP 头中添加 <code>Access-Control-Allow-Origin</code> 字段。</p></div><br>&#8195;&#8195;绝了都，歌词为什么就不能像封面图片直接通过访问资源拿到呢？就不能弄得和封面图片一个吗？算了，小白的我不懂大神的难处，只能照着维护者的意思解决喽。<p></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>&#8195;&#8195;到云平台将资源文件设置一下 HTTP 头，解决跨域问题，因为博主用的是阿里云，所以以下内容暂针对阿里云OSS对象存储进行解决跨域问题。<br>&#8195;&#8195;在阿里云控制台中选择“对象存储OSS”菜单，在选择你存放资源的那个Bucket(什么是Bucket，就是一个自己添加的存储空间)，然后选择“基础设置” – &gt; “跨域设置”。<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-11-28_1.jpg" alt="图片走丢了"><br>&#8195;&#8195;然后点击“创建规则”，接着照着我的填写和勾选。<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-11-28_2.jpg" alt="图片走丢了"><br>&#8195;&#8195;接着点击确定，再回去你的博客看看歌词是不是出来了。<br>&#8195;&#8195;还有一个小插曲，如果个人博客的域名用的是HTTPS头，那么所引用的资源文件也必须要是HTTPS头的，阿里云OSS对象存储可以直接将文件设置HTTPS头，其他的云平台自行设置，后续有机会可以再续上七牛云的设置方法。<br>其实这也不是什么很难的问题，就是自己遇上了，记录一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;博客相信现在好多技术大牛都有，例如博客园、简书、CSDN之类的大型博客网站，但是局限性蛮大的，只能按照网站的规则去写写文章，留个言什么的，要是个人博客就不一样了，可以根据自己的需要去添加任何功能。&lt;br&gt;&amp;#8195;&amp;#8195;在搭建博客时用到hexo-tag-aplayer这样一个音乐插件，可以很优雅地在H5页面中播放音乐，可以算是Hexo框架中最好的音乐插件之一了，体验效果请试听。。。&lt;br&gt;&lt;/p&gt;&lt;div id=&quot;aplayer-ZELVBgQr&quot; class=&quot;aplayer aplayer-tag-marker&quot; style=&quot;margin-bottom:20px&quot;&gt;&lt;pre class=&quot;aplayer-lrc-content&quot;&gt;&lt;/pre&gt;&lt;/div&gt;&lt;script&gt;var ap=new APlayer({element:document.getElementById(&quot;aplayer-ZELVBgQr&quot;),narrow:!1,autoplay:!1,showlrc:3,music:{title:&quot;一个人的北京&quot;,author:&quot;海鸣威&quot;,url:&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/audio/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC.mp3&quot;,pic:&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/poster/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC.jpg&quot;,lrc:&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/lyric/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC%20-%20%E6%B5%B7%E9%B8%A3%E5%A8%81.lrc&quot;}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)&lt;/script&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="博客" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://www.xujunjie-cv.com/tags/Hexo/"/>
    
      <category term="hexo-tag-aplayer" scheme="https://www.xujunjie-cv.com/tags/hexo-tag-aplayer/"/>
    
      <category term="音乐插件" scheme="https://www.xujunjie-cv.com/tags/%E9%9F%B3%E4%B9%90%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli项目中rem布局的配置</title>
    <link href="https://www.xujunjie-cv.com/vue-cli%E9%A1%B9%E7%9B%AE%E4%B8%ADrem%E5%B8%83%E5%B1%80%E7%9A%84%E9%85%8D%E7%BD%AE.html"/>
    <id>https://www.xujunjie-cv.com/vue-cli项目中rem布局的配置.html</id>
    <published>2018-11-26T12:53:00.000Z</published>
    <updated>2018-12-06T07:52:49.552Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天在用 Vue 重构一个项目的遇到一个css单位问题——rem布局。<br>rem自适应布局是前端在移动端页面中常用的手法，这次重构的项目就是一个移动端H5项目，<br>用vue搭建首页后发现css中同样用的是rem单位，在Chrome中调试时却发现被定义元素的宽高明显不一样。<a id="more"></a></p><h2 id="rem简单描述"><a href="#rem简单描述" class="headerlink" title="rem简单描述"></a>rem简单描述</h2><p>&#8195;&#8195;rem和px的比例其实是可以自行去设置相应的比例，并不是固定的一个值。我们往往直接在H5中使用rem去定义元素的属性值，所显示rem和px比例值都是浏览器的默认比例<code>1rem = 16px</code>，所以如果给一个div定义宽度<code>width: 1rem</code>，那么在浏览器默认是<code>width: 16px</code>。<br>&#8195;&#8195;是不是很好奇为什么<code>1rem = 16px</code>，这样太不好计算了，如果我需要一个元素的宽度是<code>100px</code>，如果要用rem去定义的话就是<code>100px / 16 = 6.25rem</code>，不仅不是整数，而且计算也麻烦，所以我们该怎么办才能让rem被使用的更加顺手呢？前面说过，rem和px是可以自行去设置比例，，如果在H5页面的<code>html</code>标签里设置<code>font-size: 62.5%</code>，那么相当于此页面中默认字体的大小是<code>10px</code>，也就是<code>1rem = 10px</code>，好算又好看。</p><h2 id="vue中的解决办法"><a href="#vue中的解决办法" class="headerlink" title="vue中的解决办法"></a>vue中的解决办法</h2><p>&#8195;&#8195;既然在Html的页面的<code>html</code>标签中直接设置<code>font-size</code>就可以改变rem和px的比例，那么是不是直接在Vue项目中的<code>index.html</code>入口文件的中也设置一下<code>font-size</code>呢？当然不是这样！在实际使用中有很多不同的移动端设置，他们相对应的<code>font-size</code>也当然要不一样，所以需要自适应配置rem。<br>&#8195;&#8195;办法就是使用js去改变比例，通过js去操作入口文件的 Html DOM 去改变<code>font-size</code>的值，js内容的写法有很多，这里贴出所使用的代码。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iphone6 为基准 rem 布局 ，iphone6 的宽高是375*667</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = doc.documentElement</span><br><span class="line">  <span class="keyword">var</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span></span><br><span class="line">  <span class="keyword">var</span> recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clientWidth = docEl.clientWidth</span><br><span class="line">    <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span></span><br><span class="line">    docEl.style.fontSize = (clientWidth / <span class="number">37.5</span>) + <span class="string">'px'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span></span><br><span class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>)</span><br><span class="line">  doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这里说一下实现步骤，先在Vue项目的src目录下新建一个<code>comment</code>文件夹，然后再文件夹内新建<code>rem.js</code>，将上面代码复制进去，保存。最后在src目录下的<code>main.js</code>文件中添加<code>import &#39;../comment/rem&#39;</code>，完事。</p><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h3><p>&#8195;&#8195;在找到解决办法后还遇到一个“不算问题”的问题，那就是谷歌浏览器Chrome给我造成的问题。通过上述办法设置rem和px比例为<code>1rem = 10px</code>,然后设置一个div元素的高度为7rem，然后在调试器中却发现一直是<code>84px</code>，按照比例计算应该是<code>70px</code>，找了好久找不出问题原因。后来突然灵光一闪，想起来谷歌浏览器的默认字体大小最小为<code>12px</code>，无论怎么设置字体大小都不能小于<code>12px</code>，即使你设置<code>1px</code>，最后也会发现是<code>12px</code>，所以谷歌浏览器的rem和px比例最小是<code>1rem = 12px</code>。最后只能修改比例，改成<code>1rem = 20px</code>。</p><h3 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h3><p>&#8195;&#8195;虽然设置好了rem比例，但是移动端的设备也有个别型号比较麻烦的，就像iPad Pro(1024 × 1366)，或者要是把移动端项目放在PC端上，会发现设备宽度越宽，那页面的元素也会按照比例被放大很多，导致视觉体验效果特别不好，所以我们的js代码仍需要优化，需要进行最大宽度判断。完整代码如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iphone6 为基准 rem 布局 ，iphone6 的宽高是375*667</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = doc.documentElement</span><br><span class="line">  <span class="keyword">var</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span></span><br><span class="line">  <span class="keyword">var</span> recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clientWidth = docEl.clientWidth</span><br><span class="line">    <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (clientWidth &gt; <span class="number">768</span>) &#123;</span><br><span class="line">      docEl.style.fontSize = <span class="string">'40px'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      docEl.style.fontSize = <span class="number">1</span> * (clientWidth / <span class="number">18.75</span>) + <span class="string">'px'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span></span><br><span class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>)</span><br><span class="line">  doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在用 Vue 重构一个项目的遇到一个css单位问题——rem布局。&lt;br&gt;rem自适应布局是前端在移动端页面中常用的手法，这次重构的项目就是一个移动端H5项目，&lt;br&gt;用vue搭建首页后发现css中同样用的是rem单位，在Chrome中调试时却发现被定义元素的宽高明显不一样。
    
    </summary>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://www.xujunjie-cv.com/tags/vue/"/>
    
      <category term="rem" scheme="https://www.xujunjie-cv.com/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>目前流行的前后端框架技术列举</title>
    <link href="https://www.xujunjie-cv.com/%E7%9B%AE%E5%89%8D%E6%B5%81%E8%A1%8C%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF%E5%88%97%E4%B8%BE.html"/>
    <id>https://www.xujunjie-cv.com/目前流行的前后端框架技术列举.html</id>
    <published>2018-11-22T08:54:00.000Z</published>
    <updated>2018-12-06T07:00:00.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#8195;&#8195;这是本博客的第一篇文章，不知道是该写点什么东西才好，正好自己平时比较喜欢浏览一些公总号上的技术文章，这两天看到几篇对目前比较前沿的、使用人数较多的(流行的)前后端技术，这里我整合记录一下，算是给自己往后的学习列一个大纲。<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/381846_wx.jpg" alt="图片无法加载"><a id="more"></a></p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>&#8195;&#8195;Java目前是业内使用的编程语言中占据最高的地位，毕业生初入社会要是从事后端工作的话，大多都会投递从事Java开发的简历，所以Java这门编程语言，应该是很多后端程序员必备的基础技能，甚至可以说是“吃饭的家伙”。<br>&#8195;&#8195;即使目前自己从事前端开发工作，但也会学习后端基础，多了解了解总有好处。这里列举一下对博主而言目前比较重要的一些Java Web框架，并且都上网查了每个框架的官网和github上的源码，可能没有太大的必要，但是还是记录一下吧。</p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>&#8195;&#8195;Spring这个词相信只要是程序员，就算不知道是干吗的，但至少也听说过。Spring是一个开放源代码的设计层面框架，它解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用(描述得有点官方化，摘自<a href="https://baike.baidu.com/item/spring/85061?fr=aladdin" target="_blank" rel="noopener">百度百科</a>)。<br>&#8195;&#8195;说点大家都听得懂得吧，Spring是Java后端框架里最强大的，从字面上理解是“春天”的意思，那就是我们程序员的春天，自然是最牛的。Spring的优点就不一一列举了，大多情况下我也只是会用，不太理解框架的底层原理，真是惭愧，这点的确是需要进步滴。Spring 有 IOC 和 AOP 两大利器，大大简化了软件开发复杂性。总而言之，Spring就是很好，让Java开发更加简单。<br></p><div class="note success"><p>官网：<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">https://spring.io/projects/spring-framework</a></p></div><div class="note"><p>源码：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p></div><p></p><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>&#8195;&#8195;Spring MVC就是一个MVC框架，它类似于Struts的一个MVC开框架，其实都是属于Spring，Spring MVC需要有Spring的架包作为支撑才能跑起来，是Spring项目的重要成员，主要也是也是让Java开发变得更加简答。<br></p><div class="note success"><p>官网：<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">https://spring.io/projects/spring-framework</a></p></div><div class="note default"><p>源码：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p></div><p></p><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><p>&#8195;&#8195;Spring Boot 是 Spring 开源组织下的一个子项目，个人感觉它最大的优点就是简化了需要配置文件，把Spring有关的各种xml配置文件都压缩成一个，让Spring开始使用起来更加简答。再有一个特点就是，这个东东居然自己集成了Tomcat，也就是它内置Tomcat启动。<br></p><div class="note success"><p>官网：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></p></div><div class="note default"><p>源码：<a href="https://github.com/spring-projects/spring-boot" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot</a></p></div><p></p><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><p>&#8195;&#8195;Spring Cloud 是一系列框架的有序集合，是目前最火热的微服务框架首选，它利用Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署(摘自<a href="https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin" target="_blank" rel="noopener">百度百科</a>主要博主也没用这个框架，不是很了解，后续可以一起学习交流)。<br></p><div class="note success"><p>官网：<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">http://projects.spring.io/spring-cloud/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/spring-cloud" target="_blank" rel="noopener">https://github.com/spring-cloud</a></p></div><p></p><h3 id="Mybatis-iBatis"><a href="#Mybatis-iBatis" class="headerlink" title="Mybatis/ iBatis"></a>Mybatis/ iBatis</h3><p>&#8195;&#8195;Mybatis是一款持久层(简单理解持久层就是，直接操作数据库那一层)框架，它支持定制化 SQL、存储过程以及高级映射。这个框架就是让我们在进行Java开发时，在对数据进行增删改查时显得更加优雅、高效。<br></p><div class="note success"><p>官网：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/mybatis" target="_blank" rel="noopener">https://github.com/mybatis</a></p></div><p></p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>&#8195;&#8195;很早就知道分布式服务这个概念，一直也很想学习了解一下。Dubbo 是一个分布式、高性能、透明化的 RPC 服务框架，提供服务自动注册、自动发现等高效服务治理方案。RPC 指的是远程调用协议，也就是说两个服务器交互数据。它能干吗？简单来说，用户发送的请求转交给 Nginx，然后 Nginx 决定将请求发送那个服务器（此处为 Tomcat），然后 Tomcat 将请求发送给 Dubbo，由它来决定继续调用哪个 service 层去数据库读取数据(摘自<a href="https://www.jianshu.com/p/c6553c202da7" target="_blank" rel="noopener">简书博客文章</a>)。<br></p><div class="note success"><p>官网：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/mybatis" target="_blank" rel="noopener">https://github.com/mybatis</a></p></div><p></p><h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><p>&#8195;&#8195;Netty 是由 JBOSS 提供的一个开源的、异步的、基于事件驱动的网络通信框架，用 Netty 可以快速开发高性能、高可靠性的网络服务器和客户端程序，Netty 简化了网络应用的编程开发过程，使开发网络编程变得异常简单。<br></p><div class="note success"><p>官网：<a href="https://netty.io/" target="_blank" rel="noopener">https://netty.io/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/netty/netty" target="_blank" rel="noopener">https://github.com/netty/netty</a></p></div><p></p><h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h3><p>&#8195;&#8195;Apache Shiro是一个强大而灵活的开源安全框架，它干净利落地处理身份认证，授权，企业会话管理和加密。<br></p><div class="note success"><p>官网：<a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/apache/shiro" target="_blank" rel="noopener">https://github.com/apache/shiro</a></p></div><p></p><h3 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h3><p>&#8195;&#8195;EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是 Hibernate 中默认的CacheProvider。它使用的是 JVM 的堆内存，超过内存可以设置缓存到磁盘，企业版的可以使用 JVM 堆外的物理内存。<br></p><div class="note success"><p>官网：<a href="http://www.ehcache.org/" target="_blank" rel="noopener">http://www.ehcache.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/ehcache/ehcache3" target="_blank" rel="noopener">https://github.com/ehcache/ehcache3</a></p></div><p></p><h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><p>&#8195;&#8195;JUnit 是一个 Java 语言的单元测试框架，绝大多数 Java 的开发环境都已经集成了 JUnit 作为其单元测试的工具。<br></p><div class="note success"><p>官网：<a href="https://junit.org" target="_blank" rel="noopener">https://junit.org</a></p></div><div class="note default"><p>源码：<a href="https://github.com/junit-team/" target="_blank" rel="noopener">https://github.com/junit-team/</a></p></div><p></p><h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h3><p>&#8195;&#8195;Log4j 是 Apache 的一个开源日志框架，通过 Log4j 我们可以将程序中的日志信息输出到控制台、文件等来记录日志。作为一个最老牌的日志框架，它现在的主流版本是 Log4j2。Log4j2是重新架构的一款日志框架，抛弃了之前 Log4j 的不足，以及吸取了优秀日志框架 Logback 的设计。<br></p><div class="note success"><p>官网：<a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/</a></p></div><div class="note default"><p>源码：<a href="https://logging.apache.org/log4j/2.x/source-repository.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/source-repository.html</a></p></div><p></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>&#8195;&#8195;前端，是近几年火起来的岗位，听说在以前，并没有“前端”这个岗位称呼，不过好像有叫网页制作的岗位，应该就是现在前端的前身了，工作内容就是画画网页页面，实现页面交互功能，好像并不是大多程序员的首选岗位。现在不一样了，前端近几年的技术栈更新的特别快，尤其是Node.js，那更是让我喜欢。下面同样也列出一些前端上的技术框架。</p><h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><p>&#8195;&#8195;Node.js是一个Javascript运行环境，是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。简单的说 Node.js 就是运行在服务端的 JavaScript。以上从<a href="https://baike.baidu.com/item/node.js/7567977?fr=aladdin" target="_blank" rel="noopener">百度百科</a>和<a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>借鉴过来混合描述了一下Node.js。<br>&#8195;&#8195;用自己的话简单描述一下 Node.js 吧。首先我们要确定一个正确的概念，Node.js不是JavaScript框架，应该算一个开发环境，这样说吧，安装了Node.js，就可以通过命令行下载目前网络上各种组件依赖，从而搭建起来前端项目。Node本身也算是一种后台语言，也就是用JS语言实现后台功能，大多是前端工程师在用。<br></p><div class="note success"><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/nodejs/node/tree/master/lib/internal" target="_blank" rel="noopener">https://github.com/nodejs/node/tree/master/lib/internal</a></p></div><p></p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>&#8195;&#8195;Vue是目前国内比较火的前段框架，是一套构建用户界面的渐进式框架。Vue是我毕业实习所学习的第一个前端框架，上手不难，看着官方文档学习能很快掌握用法。先说说Vue最大的优点就是，相比传统的用Js或者jQuery去操作Dom来进行页面数据的渲染，Vue能直接将数据和Html元素进行连接，实时更新，减少了前端的工作量，光说不如直接去实践。<br></p><div class="note success"><p>官网：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a></p></div><p></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>&#8195;&#8195;StateOfJS 表示，React 拥有JavaScript框架里最大的市场份额，大概占比64.8%。只不过这个框架我没用过，既然这么多人在用，应该也是一个很值得去学习的。<br></p><div class="note success"><p>官网：<a href="https://reactjs.org/" target="_blank" rel="noopener">https://reactjs.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/facebook/react/" target="_blank" rel="noopener">https://github.com/facebook/react/</a></p></div><p></p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>&#8195;&#8195;Redux 是使用最广泛的工具，82％ 的满意率也证明了它的成熟程度。这是JavaScript的数据层工具，之前也没有用过，先记录一下，后续有机会可以学习。<br></p><div class="note success"><p>官网：<a href="https://www.redux.org.cn/" target="_blank" rel="noopener">https://www.redux.org.cn/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">https://github.com/reduxjs/redux</a></p></div><p></p><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><p>&#8195;&#8195;在搭建此博客之前，我并不知道有Hexo这样一个能够快速构建个人博客的前段框架，打算想自己写一个，再一次偶然的机会，我在一些技术贴上看到了一个JavaScript的后台框架Express，能够用JS语言搭建基于Node.js的后端，这让我眼前一亮，既然目前是前段开发，就心想直接用JS去做一整套包括前后端的个人博客网站吧，而且能根据我自己的需求去设计自己想要的功能。<br>&#8195;&#8195;说做就做了，我一边学习一边实践，陆陆续续经过两三个月实现了一个简单的个人博客。不多说了，后续有时间我将搭建过程写出来分享给大家。<br></p><div class="note success"><p>官网：<a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">http://www.expressjs.com.cn/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/expressjs/express" target="_blank" rel="noopener">https://github.com/expressjs/express</a></p></div><p></p><h3 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h3><p>&#8195;&#8195;调查显示，Mocha 仍然是最常用的单元测试框架。它已经存在了很长一段时间，拥有最大的生态系统。</p><h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><p>&#8195;&#8195;Electron是使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用<br></p><div class="note success"><p>官网：<a href="https://electronjs.org/" target="_blank" rel="noopener">https://electronjs.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/electron" target="_blank" rel="noopener">https://github.com/electron</a></p></div><p></p><h2 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h2><p>&#8195;&#8195;以上就是自己搜集的前后端技术框架，但是目前技术更新太快，可能有其他更加好更加便捷的框架，所以本文内容仅供参考。<br>&#8195;&#8195;除了编程语言、框架技术，我们还需要了解一下其他的开发有关的东西，如编译器、服务器、版本管理工具等等。。。<br>&#8195;&#8195;Java开发工具推荐使用 IntelliJ IDEA ，用过的朋友朋友当然最好，没有用过朋友的建议早点接触使用，目前对于 Java 开发来说，个人感觉这是最好用的编译器了。前端的话推荐使用 Visual Studio Code，这也是我自己才开始使用的前段编辑器，之前也听过，一直觉得应该和 Sublime 差不多，但是一次偶然的机会下载使用了一次，便发现没有比这更适合我的前端开发工具了。<br>&#8195;&#8195;服务器，我目前一直使用的是阿里云，阿里云有一个云翼计划，24岁以下用户自动默认为学生用户，可以购买一年114.00元的服务器(1核2G，带宽1M，40G空间，<a href="https://promotion.aliyun.com/ntms/act/campus2018.html?spm=a2c4e.11153940.blogcont221599.14.172a2cefVxYUKh&amp;userCode=kzp4uq6k" target="_blank" rel="noopener">购买链接</a>)，个人觉得相当实惠(声明，没有给阿里云打广告，只是因为真的喜欢阿里云产品)。服务器系统直接 Linux 吧，因为 WinService 和我们所使用的 Windows 没什么操作上的区别，对自己的提升不大。<br>&#8195;&#8195;版本管理工具就 Git 喽，这些网上教程都很多，SVN也可以试着了解一下，可能有些公司内部会有用到。</p><hr><p>&#8195;&#8195;学无止境，IT 行业更是如此。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;这是本博客的第一篇文章，不知道是该写点什么东西才好，正好自己平时比较喜欢浏览一些公总号上的技术文章，这两天看到几篇对目前比较前沿的、使用人数较多的(流行的)前后端技术，这里我整合记录一下，算是给自己往后的学习列一个大纲。&lt;br&gt;&lt;img src=&quot;http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/381846_wx.jpg&quot; alt=&quot;图片无法加载&quot;&gt;
    
    </summary>
    
      <category term="技术列举" scheme="https://www.xujunjie-cv.com/categories/%E6%8A%80%E6%9C%AF%E5%88%97%E4%B8%BE/"/>
    
    
      <category term="Java" scheme="https://www.xujunjie-cv.com/tags/Java/"/>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
