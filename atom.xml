<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Space</title>
  
  <subtitle>知识的记录、记忆的保存</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.xujunjie-cv.com/"/>
  <updated>2018-12-05T02:30:54.793Z</updated>
  <id>https://www.xujunjie-cv.com/</id>
  
  <author>
    <name>埃菲尔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vuex 用法总结</title>
    <link href="https://www.xujunjie-cv.com/Vuex-%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93.html"/>
    <id>https://www.xujunjie-cv.com/Vuex-用法总结.html</id>
    <published>2018-12-01T14:14:00.000Z</published>
    <updated>2018-12-05T02:30:54.793Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#8195;&#8195;很早就开始使用Vue框架了，一直没有用到Vuex，也是最近才开始学着使用Vuex进行全局的状态管理，不得不说，是真的好用。<br>&#8195;&#8195;百度一下就能找到Vuex的官方文档，介绍的很官方化，可就是因为太官方化了，开始学习的时候总是看的似懂非懂，相信很多人也会有这样的感觉，所以博主将Vuex以自己所理解的程度来用自己的话简单记录一下使用方法。对于资深的前端大神们，要是愿意对本文提出意见，当然最好。<br><img src="https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/vuex.jpg" alt="图片走丢了"><br><a id="more"></a></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>&#8195;&#8195;先说说Vuex是个什么东西吧。先给大家一个<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">官方文档传送门</a>，官方是这样介绍的：<br></p><div class="note default"><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p></div><p></p><p>&#8195;&#8195;意思就是 Vuex 是一个 Vue 程序的状态管理器，对 Vue 中的一些进行及时更新。我们在项目会使用全局变量来存储一些频繁被使用的信息，比如用户信息、购物车信息等等，这些信息存在全局中随时取用，比起每次去网络请求数据会更加方便、高效。Vue 应用中也会需要用到全局变量来管理一些全局信息，Vuex就是这么一个东东。 不仅如此，Vuex 中管理的状态，一旦改变，可以及时渲染到整个应用中。</p><h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>根据官方的文档描述，引用方式有两种，一种就是直接引用全局 Script 的文件，但是要注意必须 Vuex 要在 Vue 引用之后再引用，如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/path/to/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"/path/to/vuex.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p></p><p><font color="red">注意：</font>上面应用地址<code>/path/to</code>只是样例，真正的地址是 <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue</a> 和 <a href="https://vuex.vuejs.org/zh/installation.html" target="_blank" rel="noopener">Vuex</a> 的 CDN ，官网上都有。<br>&#8195;&#8195;若是在一个模块化的打包系统中，需要显式地通过 <code>Vue.use()</code> 来安装 Vuex：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><p></p><p>一般都会用第二种方法，不过需要先进行 <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue</a> 和 <a href="https://vuex.vuejs.org/zh/installation.html" target="_blank" rel="noopener">Vuex</a> 的安装。</p><h3 id="基本的-Vuex-结构"><a href="#基本的-Vuex-结构" class="headerlink" title="基本的 Vuex 结构"></a>基本的 Vuex 结构</h3><p>&#8195;&#8195;Vuex 基本结构如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这是Vue-cli 搭建Vue项目时自带就生成Vuex模板(博主这里用的Vue-cli 3.0以上的版本，如果在初始化项目的时候勾选了 Vuex 组件才会有内容如上的store.js文件，位于src目录下)，单词 store 是仓库的意思，很明显，Vuex将存储全局信息的地方称之为仓库。创建好了基本的Vuex 仓库之后需要在 Vue 对象中引入它(注意：一个 Vue 项目应用中只能有一个 Vuex 仓库，足够了！)，具体是在项目入口 main.js 文件中引用，如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;如果是简单的小型项目，只需要一个<code>store.js</code>即可，毕竟没有太多信息量需要全局管理，若是中大型项目，可以新建一个store文件夹，里面再新建sate.js、mutation.js、actions.js、getter.js分别对应仓库的state、mutations、actions、getter，最后再新建一个index.js，<code>new Vuex.Store()</code>将这四个文件都引用进去即可。<br>&#8195;&#8195;综上所述，Vuex 其实并不是很复杂，就是一个管理 Vue 项目的全局状态信息的管理器，称为store（仓库），主要包含State、Mutation、Action三个核心部分，getter可用可不用看，看自己的项目需要。</p><h3 id="Vuex-仓库之-State"><a href="#Vuex-仓库之-State" class="headerlink" title="Vuex 仓库之 State"></a>Vuex 仓库之 State</h3><p>&#8195;&#8195;Vuex 仓库的核心部分State，官方形容是驱动应用的数据源，我的理解就是这是一个存放数据的地方，就相当于 Vue 中的data属性一样，全部的变量就放在这里，里面存放的数据是项目全局都可访问的状态信息。不多说，直接上代码！<br>&#8195;&#8195;我们在sate里设置一个数据源，就按照官网的例子来吧，设置一个变量叫count，初始值为0，如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;然后在新建两个Vue模板，分别为 ATest.vue 和 BTest.vue 就放在view目录下(这是Vue-cli 3.0以上项目才有的目录，就是视图模板的文件夹)，Vue 路由里配置这两个模板组件，怎么配置就不说了，这是 Vue 的知识，不会的请移步<a href="http://www.runoob.com/vue2/vue-install.html" target="_blank" rel="noopener">Vue菜鸟教程</a>。ATest.vue 和 BTest.vue 都用 <code></code>来输出全局状态count的值，两个模板的内容都如下：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是ATest页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>全局状态count：&#123;&#123;$store.state.count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;BTest.vue 中标题就写“这是BTest页面”。然后把项目跑起来，可以看到 ATest 和 BTest 两个视图中都能显示count的值，效果如下:<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/vuex_1.jpg" alt=""><br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/vuex_2.jpg" alt=""><br>&#8195;&#8195;要是在store仓库中修改state中的count值为10，那么这两个视图中的count也会变成10。但是这样子去写不够优雅，不够漂亮，所以下面介绍三种比较优雅的获取仓库共享值得方法。</p><p><font size="3"><strong>赋值方法一：通过computed的计算属性直接赋值</strong></font><br>&#8195;&#8195;computed是 Vue 的属性，主要用来监控所定义的变量发生变化，变量不需要在data属性中定义，只需要在computed中定义，然后就可以在页面上进行双向数据绑定进行页面渲染，还有就是computed属性可以在变量输出前就对其值进行改变，那我们就用这个方法来将store.js中的state里的值赋值给data。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  count () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后将模板中的 <code>$store.state.count</code> 改成 <code>count</code>，再运行项目发现也是能取到值。</p><p><font size="3"><strong>赋值方法二：在computed中通过mapState的对象来赋值</strong></font><br>&#8195;&#8195;mapState是一个 Vuex 的辅助函数，直接上代码。首先我们需要引用mapState。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;然后还在computed计算属性里写如下代码：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState(&#123;</span><br><span class="line">  count: <span class="function"><span class="params">state</span> =&gt;</span> state.count <span class="comment">// 此处使用EC6的箭头函数语法，理解为传入state对象，返回state.count属性</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;上面用的ES6的箭头函数语法，不了解可以先去百度了解一下，不是很难，就是换了一种函数的写法，显得比较简洁优化、高端大气。</p><p><font size="3"><strong>赋值方法三：在computed中通过mapState的数组来赋值</strong></font><br>&#8195;&#8195;其实3种赋值的方法都是在computed中进行，只是一个比一个更加简洁、优雅。这种方法也是用mapState辅助函数，但是更加简单，如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([<span class="string">"count"</span>]) <span class="comment">//映射this.count 为 store.state.count</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这样也可以拿到state的值，大多都是用这种方法。</p><h3 id="Vuex-仓库之-Mutation"><a href="#Vuex-仓库之-Mutation" class="headerlink" title="Vuex 仓库之 Mutation"></a>Vuex 仓库之 Mutation</h3><p>&#8195;&#8195;State 就像是 Vue 里的data属性一样用来存放变量，那么 Mutation 就好比是 Vue 中的methods一样，用来存放方法，只要是用于更改store仓库里的变量唯一放方法就是用 Mutation。先给出一段官方的介绍：<br></p><div class="note default"><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。</p></div><br>&#8195;&#8195;Mutation的使用就是提交一个commit指令来告诉 Vuex 要使用哪个方法来进行对变量进行操作，基本语法是<code>$store.commit(String methos)</code>，先来一个简单的样例代码，在ATest.vue的Html部分加上两个按钮事件，完整代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是ATest页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>全局状态count：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('add')"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('reduce')"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>store.js中再修改mutation属性：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  add (state) &#123;</span><br><span class="line">    state.count += <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  reduce (state) &#123;</span><br><span class="line">    state.count -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;运行项目，发现点击按钮就会进行相应的加减操作，在ATest视图操作完了可以跳转去BTest瞧瞧count是不是也相应的改变了。在<code>commit()</code>方法中不仅可以传方法名，也能传入一个参数，通过我们所传入的值来进行加减。具体代码如下：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是ATest页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>全局状态count：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('add',5)"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('reduce',5)"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>store.js中再修改mutation属性：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  add (state,n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;,</span><br><span class="line">  reduce (state,n) &#123;</span><br><span class="line">    state.count -= n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这样传入是多少，就是进行多少的加减操作。上面说到State有辅助函数mapState，方便对变量的取值，Vuex 倒也是不偏心，Mutations也有辅助函数mapMutations。</p><p><font size="3"><strong>通过mapMutations模板获取Mutations方法</strong></font><br>&#8195;&#8195;实际开发中当然不希望每次提交commit都直接在button的click事件中进行，而mapMutations辅助函数能直接让button的点击事件指向方法名，就像<code>@click=&quot;add&quot;</code>，实现如下：<br>&#8195;&#8195;1、先引用辅助函数mapState:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;然后在 Vue 的methosd属性中添加mapMutations：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations([<span class="string">'add'</span>,<span class="string">'reduce'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;mapMutations中的数组内的每一个项值就相当于方法名，这样就可以直接在点击事件指向方法名，就像这样：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reduce"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="Vuex-仓库之-Actions"><a href="#Vuex-仓库之-Actions" class="headerlink" title="Vuex 仓库之 Actions"></a>Vuex 仓库之 Actions</h3><p>&#8195;&#8195;Actions其实就是Mutations的升级版，因为他们的功能基本一样，只不过和 Mutations 不一样的是，Actions 是异步的，而 Mutations 是同步的。同步就是代码必须要一行一行执行，请求必须要一个接着一个，而异步不是这样，不会因为一个请求需要延迟而让后面的代码进行等待(这是我比较浅显庸俗的理解，要是理解得不对望见谅，欢迎纠正！(′▽`〃))。所以，Actions 是可以异步改变state状态的，Mutations 一定是同步改变状态的，废话太多了，直接上代码吧！<br>&#8195;&#8195;首先在store.js中actions添加方法，这里先说明一下，Actions里的方法是可以调用Mutations里的方法的，下面把各类情况都列一下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  add_100 (&#123; state &#125;) &#123;</span><br><span class="line">    state.count += <span class="number">100</span> <span class="comment">// 此方法就是将count加100, &#123;state&#125;就是仓库的数据源</span></span><br><span class="line">  &#125;,</span><br><span class="line">  add_call (context) &#123;</span><br><span class="line">    context.commit(<span class="string">'add'</span>) <span class="comment">// 此方法调用了Mutations中的add方法，content是上下文，其实就是这个store</span></span><br><span class="line">  &#125;,</span><br><span class="line">  reduce_call (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'reduce'</span>) <span class="comment">// 此方法调用了Mutations中的reduce方法， &#123;commit&#125;是直接把commit对象传递归来</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;上面三个方法都是actions里声明的方法，对应参数的解释都写在注释里面了。然后在事件中引用，这个时候不能用<code>$store.commit(String methos)</code> 来引用 actions 方法，因为这个引用方式只适用于 mutations ，引用 actions 需要这样<code>$store.dispatch(String methos)</code>来引入：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('add_100')"</span>&gt;</span>对count进行+100操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('add_call')"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('reduce_call')"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;既然 State 和 Mutations 都有辅助函数，那 Action 也一定有，毕竟都是 Vuex 的“孩子”，手心手背都是肉！！！同样的，我们需要先引入辅助函数mapAction：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br></pre></td></tr></table></figure><p></p><p>然后同样在 Vue 的 methods 方法集属性里添加辅助函数：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([<span class="string">'add_100'</span>, <span class="string">'add_call'</span>, <span class="string">'reduce_call'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;最后在Html部分修改一下button的click指向：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add_100"</span>&gt;</span>对count进行+100操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add_call"</span>&gt;</span>对count进行+1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reduce_call"</span>&gt;</span>对count进行-1操作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;但是现在我们在 actions 里写的都是同步的代码请求，效果和 mutation 一样，那下面我们加点东西，让 actions 展现自己存在的价值，我们在修改一下action的方法：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  add_100 (&#123; state &#125;) &#123;</span><br><span class="line">    state.count += <span class="number">100</span> <span class="comment">// 此方法就是将count加100, &#123;state&#125;就是仓库的数据源</span></span><br><span class="line">  &#125;,</span><br><span class="line">  add_call (context) &#123;</span><br><span class="line">    context.commit(<span class="string">'add'</span>) <span class="comment">// 此方法调用了Mutations中的add方法，content是上下文，其实就是这个store</span></span><br><span class="line">  &#125;,</span><br><span class="line">  reduce_call (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="comment">// commit('reduce') // 此方法调用了Mutations中的reduce方法， &#123;commit&#125;是直接把commit对象传递归来</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; commit(<span class="string">'reduce'</span>) &#125;, <span class="number">3000</span>) <span class="comment">// 因为没有现成的移步请求，测试移步最好的方法就是加定时器喽</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这一行代码比上面的reduce早执行，reduce会在3秒后执行'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;具体效果就不截图了，自行运行一下项目，打开控制台你就知道发生了什么。</p><h2 id="关于-Getter-和-Model"><a href="#关于-Getter-和-Model" class="headerlink" title="关于 Getter 和 Model"></a>关于 Getter 和 Model</h2><p>&#8195;&#8195;Vuex 的简单使用方法就这么多，其实还有getter、model两个属性没有将介绍，简单说一下吧！<br>&#8195;&#8195;getter其实就是设置 state 里的一些状态值在每次进行改变的时候都先对这个值进行一些操作的这样一个属性，比如可以在 store 中设置添加getter对count在每次进行加减时进行×10的操作，这个功能主要起到一些过滤作用。<br>&#8195;&#8195;而model呢，就是将上述所讲的state、mutations、actions、getter几个属性进行整合分类，主要用途就是在你的项目后期变得越来越大的时候，那么store里的状态值啊、方法啊都会变得越来越多，而有的状态值都是针对某些特定的业务需求的，那么就可以用model来进行分类，一个model里包含了state、mutations、actions、getter，而store仍然只能有一个，它就可以包含多个model。<br>&#8195;&#8195;这两个属性先这样简单介绍一下吧，后续我再补上其详细用法，见谅！</p><hr><p>&#8195;&#8195;来首音乐休息一下吧！<br></p><div id="aplayer-vdKzkOli" class="aplayer aplayer-tag-marker" style="margin-bottom:20px"><pre class="aplayer-lrc-content"></pre></div><script>var ap=new APlayer({element:document.getElementById("aplayer-vdKzkOli"),narrow:!1,autoplay:!1,showlrc:3,music:{title:"起风了",author:"买辣椒也用券",url:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/audio/%E8%B5%B7%E9%A3%8E%E4%BA%86.mp3",pic:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/poster/%E8%B5%B7%E9%A3%8E%E4%BA%86.jpg",lrc:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/lyric/%E8%B5%B7%E9%A3%8E%E4%BA%86%20-%20%E4%B9%B0%E8%BE%A3%E6%A4%92%E4%B9%9F%E7%94%A8%E5%88%B8.lrc"}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)</script><p></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;很早就开始使用Vue框架了，一直没有用到Vuex，也是最近才开始学着使用Vuex进行全局的状态管理，不得不说，是真的好用。&lt;br&gt;&amp;#8195;&amp;#8195;百度一下就能找到Vuex的官方文档，介绍的很官方化，可就是因为太官方化了，开始学习的时候总是看的似懂非懂，相信很多人也会有这样的感觉，所以博主将Vuex以自己所理解的程度来用自己的话简单记录一下使用方法。对于资深的前端大神们，要是愿意对本文提出意见，当然最好。&lt;br&gt;&lt;img src=&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/vuex.jpg&quot; alt=&quot;图片走丢了&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://www.xujunjie-cv.com/tags/vue/"/>
    
      <category term="vuex" scheme="https://www.xujunjie-cv.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Hexo音乐插件 hexo-tag-aplayer 的坑</title>
    <link href="https://www.xujunjie-cv.com/Hexo%E9%9F%B3%E4%B9%90%E6%8F%92%E4%BB%B6%20hexo-tag-aplayer%20%E7%9A%84%E5%9D%91.html"/>
    <id>https://www.xujunjie-cv.com/Hexo音乐插件 hexo-tag-aplayer 的坑.html</id>
    <published>2018-11-28T11:42:00.000Z</published>
    <updated>2018-12-05T02:09:04.529Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#8195;&#8195;博客相信现在好多技术大牛都有，例如博客园、简书、CSDN之类的大型博客网站，但是局限性蛮大的，只能按照网站的规则去写写文章，留个言什么的，要是个人博客就不一样了，可以根据自己的需要去添加任何功能。<br>&#8195;&#8195;在搭建博客时用到hexo-tag-aplayer这样一个音乐插件，可以很优雅地在H5页面中播放音乐，可以算是Hexo框架中最好的音乐插件之一了，体验效果请试听。。。<br></p><div id="aplayer-uVRDGEyk" class="aplayer aplayer-tag-marker" style="margin-bottom:20px"><pre class="aplayer-lrc-content"></pre></div><script>var ap=new APlayer({element:document.getElementById("aplayer-uVRDGEyk"),narrow:!1,autoplay:!1,showlrc:3,music:{title:"一个人的北京",author:"海鸣威",url:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/audio/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC.mp3",pic:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/poster/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC.jpg",lrc:"https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/lyric/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC%20-%20%E6%B5%B7%E9%B8%A3%E5%A8%81.lrc"}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)</script><br><a id="more"></a><p></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>&#8195;&#8195;使用hexo-tag-aplayer插件的时候，可以将音乐文件、封面图片放在项目的资源文件夹中，直接引用就行，但是时间长了，项目中的资源文件夹会非常大，严重影响项目的部署效果。插件可以直接引用网络路径，这样就可以将文件上传到阿里云、七牛云之类的对象存储服务器(这里说点废话，阿里云对象存储需要money，但是不是很贵，七牛云普通用户就可以享受10G的免费存储空间，其他的云平台自己百度)，然后复制粘贴文件URL就可以实现上面音乐播放器的效果。<br>&#8195;&#8195;问题在这，这个插件也可以设定歌曲的歌词，不过也需要引用歌词文件(一般都是lrc格式，也有txt格式等)，同样将歌词文件上传到相应的云平台上,然后拷贝文件路径粘贴一下，部署，发现歌词没显示出来，F12查看控制台，发现说歌词文件访问不了，存在跨域问题，绝了都！！！<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-11-28_3.jpg" alt="图片走丢了"><br>&#8195;&#8195;为啥封面图片就可以直接配置网络路径访问呢？开始没想到在云平台进行相应的设置，光在自己博客项目一顿倒腾，没整出来，简直了。<br>&#8195;&#8195;后来直接上插件的GitHub开源项目的issues讨论里面溜达一圈，希望能找到一点线索。果然，不管是我一个人有这样的问题，插件目前的维护者给出的解决办法如下：<br></p><div class="note default"><p>&#8195;&#8195;跨域限制是浏览器为了防止诸如 CSRF 等攻击所采取的安全措施，如果歌词文件是遇到跨域问题，请考虑将歌词文件放到同源网站（如 <a href="https://www.xxwhite.com" target="_blank" rel="noopener">https://www.xxwhite.com</a> ）再进行请求，或者如果有歌词文件所在服务器的权限，请在歌词文件资源返回的 HTTP 头中添加 <code>Access-Control-Allow-Origin</code> 字段。</p></div><br>&#8195;&#8195;绝了都，歌词为什么就不能像封面图片直接通过访问资源拿到呢？就不能弄得和封面图片一个吗？算了，小白的我不懂大神的难处，只能照着维护者的意思解决喽。<p></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>&#8195;&#8195;到云平台将资源文件设置一下 HTTP 头，解决跨域问题，因为博主用的是阿里云，所以以下内容暂针对阿里云OSS对象存储进行解决跨域问题。<br>&#8195;&#8195;在阿里云控制台中选择“对象存储OSS”菜单，在选择你存放资源的那个Bucket(什么是Bucket，就是一个自己添加的存储空间)，然后选择“基础设置” – &gt; “跨域设置”。<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-11-28_1.jpg" alt="图片走丢了"><br>&#8195;&#8195;然后点击“创建规则”，接着照着我的填写和勾选。<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/2018-11-28_2.jpg" alt="图片走丢了"><br>&#8195;&#8195;接着点击确定，再回去你的博客看看歌词是不是出来了。<br>&#8195;&#8195;还有一个小插曲，如果个人博客的域名用的是HTTPS头，那么所引用的资源文件也必须要是HTTPS头的，阿里云OSS对象存储可以直接将文件设置HTTPS头，其他的云平台自行设置，后续有机会可以再续上七牛云的设置方法。<br>其实这也不是什么很难的问题，就是自己遇上了，记录一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;博客相信现在好多技术大牛都有，例如博客园、简书、CSDN之类的大型博客网站，但是局限性蛮大的，只能按照网站的规则去写写文章，留个言什么的，要是个人博客就不一样了，可以根据自己的需要去添加任何功能。&lt;br&gt;&amp;#8195;&amp;#8195;在搭建博客时用到hexo-tag-aplayer这样一个音乐插件，可以很优雅地在H5页面中播放音乐，可以算是Hexo框架中最好的音乐插件之一了，体验效果请试听。。。&lt;br&gt;&lt;/p&gt;&lt;div id=&quot;aplayer-uVRDGEyk&quot; class=&quot;aplayer aplayer-tag-marker&quot; style=&quot;margin-bottom:20px&quot;&gt;&lt;pre class=&quot;aplayer-lrc-content&quot;&gt;&lt;/pre&gt;&lt;/div&gt;&lt;script&gt;var ap=new APlayer({element:document.getElementById(&quot;aplayer-uVRDGEyk&quot;),narrow:!1,autoplay:!1,showlrc:3,music:{title:&quot;一个人的北京&quot;,author:&quot;海鸣威&quot;,url:&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/audio/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC.mp3&quot;,pic:&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/poster/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC.jpg&quot;,lrc:&quot;https://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/music/lyric/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8C%97%E4%BA%AC%20-%20%E6%B5%B7%E9%B8%A3%E5%A8%81.lrc&quot;}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)&lt;/script&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="博客" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://www.xujunjie-cv.com/tags/Hexo/"/>
    
      <category term="hexo-tag-aplayer" scheme="https://www.xujunjie-cv.com/tags/hexo-tag-aplayer/"/>
    
      <category term="音乐插件" scheme="https://www.xujunjie-cv.com/tags/%E9%9F%B3%E4%B9%90%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli项目中rem布局的配置</title>
    <link href="https://www.xujunjie-cv.com/vue-cli%E9%A1%B9%E7%9B%AE%E4%B8%ADrem%E5%B8%83%E5%B1%80%E7%9A%84%E9%85%8D%E7%BD%AE.html"/>
    <id>https://www.xujunjie-cv.com/vue-cli项目中rem布局的配置.html</id>
    <published>2018-11-26T12:53:00.000Z</published>
    <updated>2018-12-05T02:02:00.625Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天在用 Vue 重构一个项目的遇到一个css单位问题——rem布局。<br>rem自适应布局是前端在移动端页面中常用的手法，这次重构的项目就是一个移动端H5项目，<br>用vue搭建首页后发现css中同样用的是rem单位，在Chrome中调试时却发现被定义元素的宽高明显不一样。<br><a id="more"></a></p><h2 id="rem简单描述"><a href="#rem简单描述" class="headerlink" title="rem简单描述"></a>rem简单描述</h2><p>&#8195;&#8195;rem和px的比例其实是可以自行去设置相应的比例，并不是固定的一个值。我们往往直接在H5中使用rem去定义元素的属性值，所显示rem和px比例值都是浏览器的默认比例<code>1rem = 16px</code>，所以如果给一个div定义宽度<code>width: 1rem</code>，那么在浏览器默认是<code>width: 16px</code>。<br>&#8195;&#8195;是不是很好奇为什么<code>1rem = 16px</code>，这样太不好计算了，如果我需要一个元素的宽度是<code>100px</code>，如果要用rem去定义的话就是<code>100px / 16 = 6.25rem</code>，不仅不是整数，而且计算也麻烦，所以我们该怎么办才能让rem被使用的更加顺手呢？前面说过，rem和px是可以自行去设置比例，，如果在H5页面的<code>html</code>标签里设置<code>font-size: 62.5%</code>，那么相当于此页面中默认字体的大小是<code>10px</code>，也就是<code>1rem = 10px</code>，好算又好看。</p><h2 id="vue中的解决办法"><a href="#vue中的解决办法" class="headerlink" title="vue中的解决办法"></a>vue中的解决办法</h2><p>&#8195;&#8195;既然在Html的页面的<code>html</code>标签中直接设置<code>font-size</code>就可以改变rem和px的比例，那么是不是直接在Vue项目中的<code>index.html</code>入口文件的中也设置一下<code>font-size</code>呢？当然不是这样！在实际使用中有很多不同的移动端设置，他们相对应的<code>font-size</code>也当然要不一样，所以需要自适应配置rem。<br>&#8195;&#8195;办法就是使用js去改变比例，通过js去操作入口文件的 Html DOM 去改变<code>font-size</code>的值，js内容的写法有很多，这里贴出所使用的代码。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iphone6 为基准 rem 布局 ，iphone6 的宽高是375*667</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = doc.documentElement</span><br><span class="line">  <span class="keyword">var</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span></span><br><span class="line">  <span class="keyword">var</span> recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clientWidth = docEl.clientWidth</span><br><span class="line">    <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span></span><br><span class="line">    docEl.style.fontSize = (clientWidth / <span class="number">37.5</span>) + <span class="string">'px'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span></span><br><span class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>)</span><br><span class="line">  doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这里说一下实现步骤，先在Vue项目的src目录下新建一个<code>comment</code>文件夹，然后再文件夹内新建<code>rem.js</code>，将上面代码复制进去，保存。最后在src目录下的<code>main.js</code>文件中添加<code>import &#39;../comment/rem&#39;</code>，完事。</p><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h3><p>&#8195;&#8195;在找到解决办法后还遇到一个“不算问题”的问题，那就是谷歌浏览器Chrome给我造成的问题。通过上述办法设置rem和px比例为<code>1rem = 10px</code>,然后设置一个div元素的高度为7rem，然后在调试器中却发现一直是<code>84px</code>，按照比例计算应该是<code>70px</code>，找了好久找不出问题原因。后来突然灵光一闪，想起来谷歌浏览器的默认字体大小最小为<code>12px</code>，无论怎么设置字体大小都不能小于<code>12px</code>，即使你设置<code>1px</code>，最后也会发现是<code>12px</code>，所以谷歌浏览器的rem和px比例最小是<code>1rem = 12px</code>。最后只能修改比例，改成<code>1rem = 20px</code>。</p><h3 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h3><p>&#8195;&#8195;虽然设置好了rem比例，但是移动端的设备也有个别型号比较麻烦的，就像iPad Pro(1024 × 1366)，或者要是把移动端项目放在PC端上，会发现设备宽度越宽，那页面的元素也会按照比例被放大很多，导致视觉体验效果特别不好，所以我们的js代码仍需要优化，需要进行最大宽度判断。完整代码如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iphone6 为基准 rem 布局 ，iphone6 的宽高是375*667</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = doc.documentElement</span><br><span class="line">  <span class="keyword">var</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span></span><br><span class="line">  <span class="keyword">var</span> recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clientWidth = docEl.clientWidth</span><br><span class="line">    <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (clientWidth &gt; <span class="number">768</span>) &#123;</span><br><span class="line">      docEl.style.fontSize = <span class="string">'40px'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      docEl.style.fontSize = <span class="number">1</span> * (clientWidth / <span class="number">18.75</span>) + <span class="string">'px'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span></span><br><span class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>)</span><br><span class="line">  doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在用 Vue 重构一个项目的遇到一个css单位问题——rem布局。&lt;br&gt;rem自适应布局是前端在移动端页面中常用的手法，这次重构的项目就是一个移动端H5项目，&lt;br&gt;用vue搭建首页后发现css中同样用的是rem单位，在Chrome中调试时却发现被定义元素的宽高明显不一样。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://www.xujunjie-cv.com/tags/vue/"/>
    
      <category term="rem" scheme="https://www.xujunjie-cv.com/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>目前流行的前后端框架技术列举</title>
    <link href="https://www.xujunjie-cv.com/%E7%9B%AE%E5%89%8D%E6%B5%81%E8%A1%8C%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF%E5%88%97%E4%B8%BE.html"/>
    <id>https://www.xujunjie-cv.com/目前流行的前后端框架技术列举.html</id>
    <published>2018-11-22T08:54:00.000Z</published>
    <updated>2018-12-05T01:51:21.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#8195;&#8195;这是本博客的第一篇文章，不知道是该写点什么东西才好，正好自己平时比较喜欢浏览一些公总号上的技术文章，这两天看到几篇对目前比较前沿的、使用人数较多的(流行的)前后端技术，这里我整合记录一下，算是给自己往后的学习列一个大纲。<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/381846_wx.jpg" alt="图片无法加载"><br><a id="more"></a></p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>&#8195;&#8195;Java目前是业内使用的编程语言中占据最高的地位，毕业生初入社会要是从事后端工作的话，大多都会投递从事Java开发的简历，所以Java这门编程语言，应该是很多后端程序员必备的基础技能，甚至可以说是“吃饭的家伙”。<br>&#8195;&#8195;即使目前自己从事前端开发工作，但也会学习后端基础，多了解了解总有好处。这里列举一下对博主而言目前比较重要的一些Java Web框架，并且都上网查了每个框架的官网和github上的源码，可能没有太大的必要，但是还是记录一下吧。</p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>&#8195;&#8195;Spring这个词相信只要是程序员，就算不知道是干吗的，但至少也听说过。Spring是一个开放源代码的设计层面框架，它解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用(描述得有点官方化，摘自<a href="https://baike.baidu.com/item/spring/85061?fr=aladdin" target="_blank" rel="noopener">百度百科</a>)。<br>&#8195;&#8195;说点大家都听得懂得吧，Spring是Java后端框架里最强大的，从字面上理解是“春天”的意思，那就是我们程序员的春天，自然是最牛的。Spring的优点就不一一列举了，大多情况下我也只是会用，不太理解框架的底层原理，真是惭愧，这点的确是需要进步滴。Spring 有 IOC 和 AOP 两大利器，大大简化了软件开发复杂性。总而言之，Spring就是很好，让Java开发更加简单。<br></p><div class="note success"><p>官网：<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">https://spring.io/projects/spring-framework</a></p></div><div class="note"><p>源码：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p></div><p></p><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>&#8195;&#8195;Spring MVC就是一个MVC框架，它类似于Struts的一个MVC开框架，其实都是属于Spring，Spring MVC需要有Spring的架包作为支撑才能跑起来，是Spring项目的重要成员，主要也是也是让Java开发变得更加简答。<br></p><div class="note success"><p>官网：<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">https://spring.io/projects/spring-framework</a></p></div><div class="note default"><p>源码：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p></div><p></p><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><p>&#8195;&#8195;Spring Boot 是 Spring 开源组织下的一个子项目，个人感觉它最大的优点就是简化了需要配置文件，把Spring有关的各种xml配置文件都压缩成一个，让Spring开始使用起来更加简答。再有一个特点就是，这个东东居然自己集成了Tomcat，也就是它内置Tomcat启动。<br></p><div class="note success"><p>官网：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></p></div><div class="note default"><p>源码：<a href="https://github.com/spring-projects/spring-boot" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot</a></p></div><p></p><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><p>&#8195;&#8195;Spring Cloud 是一系列框架的有序集合，是目前最火热的微服务框架首选，它利用Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署(摘自<a href="https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin" target="_blank" rel="noopener">百度百科</a>主要博主也没用这个框架，不是很了解，后续可以一起学习交流)。<br></p><div class="note success"><p>官网：<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">http://projects.spring.io/spring-cloud/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/spring-cloud" target="_blank" rel="noopener">https://github.com/spring-cloud</a></p></div><p></p><h3 id="Mybatis-iBatis"><a href="#Mybatis-iBatis" class="headerlink" title="Mybatis/ iBatis"></a>Mybatis/ iBatis</h3><p>&#8195;&#8195;Mybatis是一款持久层(简单理解持久层就是，直接操作数据库那一层)框架，它支持定制化 SQL、存储过程以及高级映射。这个框架就是让我们在进行Java开发时，在对数据进行增删改查时显得更加优雅、高效。<br></p><div class="note success"><p>官网：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/mybatis" target="_blank" rel="noopener">https://github.com/mybatis</a></p></div><p></p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>&#8195;&#8195;很早就知道分布式服务这个概念，一直也很想学习了解一下。Dubbo 是一个分布式、高性能、透明化的 RPC 服务框架，提供服务自动注册、自动发现等高效服务治理方案。RPC 指的是远程调用协议，也就是说两个服务器交互数据。它能干吗？简单来说，用户发送的请求转交给 Nginx，然后 Nginx 决定将请求发送那个服务器（此处为 Tomcat），然后 Tomcat 将请求发送给 Dubbo，由它来决定继续调用哪个 service 层去数据库读取数据(摘自<a href="https://www.jianshu.com/p/c6553c202da7" target="_blank" rel="noopener">简书博客文章</a>)。<br></p><div class="note success"><p>官网：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/mybatis" target="_blank" rel="noopener">https://github.com/mybatis</a></p></div><p></p><h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><p>&#8195;&#8195;Netty 是由 JBOSS 提供的一个开源的、异步的、基于事件驱动的网络通信框架，用 Netty 可以快速开发高性能、高可靠性的网络服务器和客户端程序，Netty 简化了网络应用的编程开发过程，使开发网络编程变得异常简单。<br></p><div class="note success"><p>官网：<a href="https://netty.io/" target="_blank" rel="noopener">https://netty.io/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/netty/netty" target="_blank" rel="noopener">https://github.com/netty/netty</a></p></div><p></p><h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h3><p>&#8195;&#8195;Apache Shiro是一个强大而灵活的开源安全框架，它干净利落地处理身份认证，授权，企业会话管理和加密。<br></p><div class="note success"><p>官网：<a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/apache/shiro" target="_blank" rel="noopener">https://github.com/apache/shiro</a></p></div><p></p><h3 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h3><p>&#8195;&#8195;EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是 Hibernate 中默认的CacheProvider。它使用的是 JVM 的堆内存，超过内存可以设置缓存到磁盘，企业版的可以使用 JVM 堆外的物理内存。<br></p><div class="note success"><p>官网：<a href="http://www.ehcache.org/" target="_blank" rel="noopener">http://www.ehcache.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/ehcache/ehcache3" target="_blank" rel="noopener">https://github.com/ehcache/ehcache3</a></p></div><p></p><h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><p>&#8195;&#8195;JUnit 是一个 Java 语言的单元测试框架，绝大多数 Java 的开发环境都已经集成了 JUnit 作为其单元测试的工具。<br></p><div class="note success"><p>官网：<a href="https://junit.org" target="_blank" rel="noopener">https://junit.org</a></p></div><div class="note default"><p>源码：<a href="https://github.com/junit-team/" target="_blank" rel="noopener">https://github.com/junit-team/</a></p></div><p></p><h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h3><p>&#8195;&#8195;Log4j 是 Apache 的一个开源日志框架，通过 Log4j 我们可以将程序中的日志信息输出到控制台、文件等来记录日志。作为一个最老牌的日志框架，它现在的主流版本是 Log4j2。Log4j2是重新架构的一款日志框架，抛弃了之前 Log4j 的不足，以及吸取了优秀日志框架 Logback 的设计。<br></p><div class="note success"><p>官网：<a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/</a></p></div><div class="note default"><p>源码：<a href="https://logging.apache.org/log4j/2.x/source-repository.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/source-repository.html</a></p></div><p></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>&#8195;&#8195;前端，是近几年火起来的岗位，听说在以前，并没有“前端”这个岗位称呼，不过好像有叫网页制作的岗位，应该就是现在前端的前身了，工作内容就是画画网页页面，实现页面交互功能，好像并不是大多程序员的首选岗位。现在不一样了，前端近几年的技术栈更新的特别快，尤其是Node.js，那更是让我喜欢。下面同样也列出一些前端上的技术框架。</p><h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><p>&#8195;&#8195;Node.js是一个Javascript运行环境，是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。简单的说 Node.js 就是运行在服务端的 JavaScript。以上从<a href="https://baike.baidu.com/item/node.js/7567977?fr=aladdin" target="_blank" rel="noopener">百度百科</a>和<a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>借鉴过来混合描述了一下Node.js。<br>&#8195;&#8195;用自己的话简单描述一下 Node.js 吧。首先我们要确定一个正确的概念，Node.js不是JavaScript框架，应该算一个开发环境，这样说吧，安装了Node.js，就可以通过命令行下载目前网络上各种组件依赖，从而搭建起来前端项目。Node本身也算是一种后台语言，也就是用JS语言实现后台功能，大多是前端工程师在用。<br></p><div class="note success"><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/nodejs/node/tree/master/lib/internal" target="_blank" rel="noopener">https://github.com/nodejs/node/tree/master/lib/internal</a></p></div><p></p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>&#8195;&#8195;Vue是目前国内比较火的前段框架，是一套构建用户界面的渐进式框架。Vue是我毕业实习所学习的第一个前端框架，上手不难，看着官方文档学习能很快掌握用法。先说说Vue最大的优点就是，相比传统的用Js或者jQuery去操作Dom来进行页面数据的渲染，Vue能直接将数据和Html元素进行连接，实时更新，减少了前端的工作量，光说不如直接去实践。<br></p><div class="note success"><p>官网：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a></p></div><p></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>&#8195;&#8195;StateOfJS 表示，React 拥有JavaScript框架里最大的市场份额，大概占比64.8%。只不过这个框架我没用过，既然这么多人在用，应该也是一个很值得去学习的。<br></p><div class="note success"><p>官网：<a href="https://reactjs.org/" target="_blank" rel="noopener">https://reactjs.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/facebook/react/" target="_blank" rel="noopener">https://github.com/facebook/react/</a></p></div><p></p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>&#8195;&#8195;Redux 是使用最广泛的工具，82％ 的满意率也证明了它的成熟程度。这是JavaScript的数据层工具，之前也没有用过，先记录一下，后续有机会可以学习。<br></p><div class="note success"><p>官网：<a href="https://www.redux.org.cn/" target="_blank" rel="noopener">https://www.redux.org.cn/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">https://github.com/reduxjs/redux</a></p></div><p></p><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><p>&#8195;&#8195;在搭建此博客之前，我并不知道有Hexo这样一个能够快速构建个人博客的前段框架，打算想自己写一个，再一次偶然的机会，我在一些技术贴上看到了一个JavaScript的后台框架Express，能够用JS语言搭建基于Node.js的后端，这让我眼前一亮，既然目前是前段开发，就心想直接用JS去做一整套包括前后端的个人博客网站吧，而且能根据我自己的需求去设计自己想要的功能。<br>&#8195;&#8195;说做就做了，我一边学习一边实践，陆陆续续经过两三个月实现了一个简单的个人博客。不多说了，后续有时间我将搭建过程写出来分享给大家。<br></p><div class="note success"><p>官网：<a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">http://www.expressjs.com.cn/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/expressjs/express" target="_blank" rel="noopener">https://github.com/expressjs/express</a></p></div><p></p><h3 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h3><p>&#8195;&#8195;调查显示，Mocha 仍然是最常用的单元测试框架。它已经存在了很长一段时间，拥有最大的生态系统。</p><h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><p>&#8195;&#8195;Electron是使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用<br></p><div class="note success"><p>官网：<a href="https://electronjs.org/" target="_blank" rel="noopener">https://electronjs.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/electron" target="_blank" rel="noopener">https://github.com/electron</a></p></div><p></p><h2 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h2><p>&#8195;&#8195;以上就是自己搜集的前后端技术框架，但是目前技术更新太快，可能有其他更加好更加便捷的框架，所以本文内容仅供参考。<br>&#8195;&#8195;除了编程语言、框架技术，我们还需要了解一下其他的开发有关的东西，如编译器、服务器、版本管理工具等等。。。<br>&#8195;&#8195;Java开发工具推荐使用 IntelliJ IDEA ，用过的朋友朋友当然最好，没有用过朋友的建议早点接触使用，目前对于 Java 开发来说，个人感觉这是最好用的编译器了。前端的话推荐使用 Visual Studio Code，这也是我自己才开始使用的前段编辑器，之前也听过，一直觉得应该和 Sublime 差不多，但是一次偶然的机会下载使用了一次，便发现没有比这更适合我的前端开发工具了。<br>&#8195;&#8195;服务器，我目前一直使用的是阿里云，阿里云有一个云翼计划，24岁以下用户自动默认为学生用户，可以购买一年114.00元的服务器(1核2G，带宽1M，40G空间，<a href="https://promotion.aliyun.com/ntms/act/campus2018.html?spm=a2c4e.11153940.blogcont221599.14.172a2cefVxYUKh&amp;userCode=kzp4uq6k" target="_blank" rel="noopener">购买链接</a>)，个人觉得相当实惠(声明，没有给阿里云打广告，只是因为真的喜欢阿里云产品)。服务器系统直接 Linux 吧，因为 WinService 和我们所使用的 Windows 没什么操作上的区别，对自己的提升不大。<br>&#8195;&#8195;版本管理工具就 Git 喽，这些网上教程都很多，SVN也可以试着了解一下，可能有些公司内部会有用到。</p><hr><p>&#8195;&#8195;学无止境，IT 行业更是如此。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;这是本博客的第一篇文章，不知道是该写点什么东西才好，正好自己平时比较喜欢浏览一些公总号上的技术文章，这两天看到几篇对目前比较前沿的、使用人数较多的(流行的)前后端技术，这里我整合记录一下，算是给自己往后的学习列一个大纲。&lt;br&gt;&lt;img src=&quot;http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/postImage/381846_wx.jpg&quot; alt=&quot;图片无法加载&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术列举" scheme="https://www.xujunjie-cv.com/categories/%E6%8A%80%E6%9C%AF%E5%88%97%E4%B8%BE/"/>
    
    
      <category term="Java" scheme="https://www.xujunjie-cv.com/tags/Java/"/>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
