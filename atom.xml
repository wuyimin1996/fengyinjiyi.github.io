<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Space</title>
  
  <subtitle>知识的记录、记忆的保存</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.xujunjie-cv.com/"/>
  <updated>2018-11-27T01:43:57.964Z</updated>
  <id>https://www.xujunjie-cv.com/</id>
  
  <author>
    <name>埃菲尔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-cli项目中rem布局的配置</title>
    <link href="https://www.xujunjie-cv.com/vue-cli%E9%A1%B9%E7%9B%AE%E4%B8%ADrem%E5%B8%83%E5%B1%80%E7%9A%84%E9%85%8D%E7%BD%AE.html"/>
    <id>https://www.xujunjie-cv.com/vue-cli项目中rem布局的配置.html</id>
    <published>2018-11-26T12:53:00.000Z</published>
    <updated>2018-11-27T01:43:57.964Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天在用vue重构一个项目的遇到一个css单位问题——rem布局。<br>rem自适应布局是前端在移动端页面中常用的手法，这次重构的项目就是一个移动端H5项目，<br>用vue搭建首页后发现css中同样用的是rem单位，在Chrome中调试时却发现被定义元素的宽高明显不一样。<br><a id="more"></a></p><h2 id="rem简单描述"><a href="#rem简单描述" class="headerlink" title="rem简单描述"></a>rem简单描述</h2><p>&#8195;&#8195;rem和px的比例其实是可以自行去设置相应的比例，并不是固定的一个值。我们往往直接在H5中使用rem去定义元素的属性值，所显示rem和px比例值都是浏览器的默认比例<code>1rem = 16px</code>，所以如果给一个div定义宽度<code>width: 1rem</code>，那么在浏览器默认是<code>width: 16px</code>。<br>&#8195;&#8195;是不是很好奇为什么<code>1rem = 16px</code>，这样太不好计算了，如果我需要一个元素的宽度是<code>100px</code>，如果要用rem去定义的话就是<code>100px / 16 = 6.25rem</code>，不仅不是整数，而且计算也麻烦，所以我们该怎么办才能让rem被使用的更加顺手呢？前面说过，rem和px是可以自行去设置比例，，如果在H5页面的<code>html</code>标签里设置<code>font-size: 62.5%</code>，那么相当于此页面中默认字体的大小是<code>10px</code>，也就是<code>1rem = 10px</code>，好算又好看，看到这样的同学可以直接在新建一个Html页面去试一试。</p><h2 id="vue中的解决办法"><a href="#vue中的解决办法" class="headerlink" title="vue中的解决办法"></a>vue中的解决办法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>&#8195;&#8195;既然在Html的页面的<code>html</code>标签中直接设置<code>font-size</code>就可以改变rem和px的比例，那么在vue中改一下入口文件就好了。vue-cli 3.0 构建的vue项目已经取消了项目根目录的<code>index.html</code>首页入口，将其转移到了根目录下public文件中，找到public下的<code>index.html</code>，在<code>html</code>标签里设置<code>font-size: 62.5%</code>，这样就可以设置rem和px的比例了。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>&#8195;&#8195;使用js去改变比例，这也是博主遇到问题后百度到最多的办法，大概意思通过js去操作入口文件的Html DOM去改变<code>font-size</code>的值，js内容的写法有很多，这里贴出博主所使用的代码。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iphone6 为基准 rem 布局 ，iphone6 的宽高是375*667</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            docEl.style.fontSize = (clientWidth / <span class="number">37.5</span>) + <span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p></p><p>&#8195;&#8195;这里说明一下具体的步骤吧，现在vue项目的src目录下新建一个<code>comment</code>文件夹，然后再文件夹内新建<code>rem.js</code>，将上面代码复制进去，保存。最后在src目录下的<code>main.js</code>文件中添加<code>import &#39;../comment/rem&#39;</code>，完事。</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>&#8195;&#8195;在找到解决办法后还遇到一个不是问题的问题，如果由同学也喜欢用谷歌浏览器Chrome去调试页面，那么你们可能也会遇到(应该一定)。博主通过上述办法设置rem和px比例为<code>1rem = 10px</code>,然后设置一个元素的高度为7rem，然后在调试器中却发现一直是<code>84px</code>，无论怎么改都解决不了，后来突然灵光一闪，想起来谷歌浏览器的默认字体大小最小为<code>12px</code>，无论怎么设置字体大小都不能小于<code>12px</code>，即使你设置<code>1px</code>，最后也会发现是<code>12px</code>，所以谷歌浏览器的rem和px比例最小是<code>1rem = 12px</code>。<br>&#8195;&#8195;可以自行修改<code>docEl.style.fontSize = (clientWidth / 37.5) + &#39;px&#39;;</code>这行代码进行配置比例。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在用vue重构一个项目的遇到一个css单位问题——rem布局。&lt;br&gt;rem自适应布局是前端在移动端页面中常用的手法，这次重构的项目就是一个移动端H5项目，&lt;br&gt;用vue搭建首页后发现css中同样用的是rem单位，在Chrome中调试时却发现被定义元素的宽高明显不一样。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://www.xujunjie-cv.com/tags/vue/"/>
    
      <category term="rem" scheme="https://www.xujunjie-cv.com/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>目前流行的前后端框架技术列举</title>
    <link href="https://www.xujunjie-cv.com/%E7%9B%AE%E5%89%8D%E6%B5%81%E8%A1%8C%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF%E5%88%97%E4%B8%BE.html"/>
    <id>https://www.xujunjie-cv.com/目前流行的前后端框架技术列举.html</id>
    <published>2018-11-22T08:54:00.000Z</published>
    <updated>2018-11-23T09:10:40.417Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&#8195;&#8195;这是本博客的第一篇文章，不知道是该写点什么东西才好，正好自己平时比较喜欢浏览一些公总号上的技术文章，这两天看到几篇对目前比较前沿的、使用人数较多的(流行的)前后端技术，这里我整合记录一下，算是给自己往后的学习列一个大纲。<br><img src="http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/381846_wx.jpg" alt="图片无法加载"><br><a id="more"></a></p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>&#8195;&#8195;Java目前是业内使用的编程语言中占据最高的地位，毕业生初入社会要是从事后端工作的话，大多都会投递从事Java开发的简历，所以Java这门编程语言，应该是很多后端程序员必备的基础技能，甚至可以说是“吃饭的家伙”。<br>&#8195;&#8195;即使目前博主本人从事前端开发工作，但也会学习后端基础，多了解了解总有好处。这里列举一下对博主而言目前比较重要的一些Java Web框架，并且都上网查了每个框架的官网和github上的源码，可能没有太大的必要，但是还是记录一下吧。</p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>&#8195;&#8195;Spring这个词我相信只要是程序员，就算不知道是干吗的，但至少也听说过。Spring是一个开放源代码的设计层面框架，他解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用(太官方化的语言，摘自<a href="https://baike.baidu.com/item/spring/85061?fr=aladdin" target="_blank" rel="noopener">百度百科</a>)。<br>&#8195;&#8195;说点大家都听得懂得吧，Spring是Java后端框架里最强大的，从字面上理解是“春天”的意思，那就是我们程序员的春天，自然是最牛的。Spring的优点我也不说了，大多情况下我也只是会用，不太理解框架的底层原理，这个的确是需要进步滴，不过我知道Spring有 IOC 和 AOP 两大利器，大大简化了软件开发复杂性。总而言之，Spring就是很好，让Java开发更加简单。<br></p><div class="note success"><p>官网：<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">https://spring.io/projects/spring-framework</a></p></div><div class="note"><p>源码：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p></div><p></p><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>&#8195;&#8195;Spring MVC就是一个MVC框架，它类似于Struts的一个MVC开框架，其实都是属于Spring，Spring MVC需要有Spring的架包作为支撑才能跑起来，是Spring项目的重要成员，主要也是也是让Java开发变得更加简答。<br></p><div class="note success"><p>官网：<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">https://spring.io/projects/spring-framework</a></p></div><div class="note default"><p>源码：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p></div><p></p><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><p>&#8195;&#8195;Spring Boot 是 Spring 开源组织下的一个子项目，个人感觉它最大的优点就是简化了需要配置文件，把Spring有关的各种xml配置文件都压缩成一个，让Spring开始使用起来更加简答。再有一个特点就是，这个东东居然自己集成了Tomcat，也就是它内置Tomcat启动。<br></p><div class="note success"><p>官网：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></p></div><div class="note default"><p>源码：<a href="https://github.com/spring-projects/spring-boot" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot</a></p></div><p></p><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><p>&#8195;&#8195;Spring Cloud 是一系列框架的有序集合，是目前最火热的微服务框架首选，它利用Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署(摘自<a href="https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin" target="_blank" rel="noopener">百度百科</a>主要博主也没用这个框架，不是很了解，后续可以一起学习交流)。<br></p><div class="note success"><p>官网：<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">http://projects.spring.io/spring-cloud/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/spring-cloud" target="_blank" rel="noopener">https://github.com/spring-cloud</a></p></div><p></p><h3 id="Mybatis-iBatis"><a href="#Mybatis-iBatis" class="headerlink" title="Mybatis/ iBatis"></a>Mybatis/ iBatis</h3><p>&#8195;&#8195;Mybatis是一款持久层(简单理解持久层就是，直接操作数据库那一层)框架，它支持定制化 SQL、存储过程以及高级映射。这个框架就是让我们在进行Java开发时，在对数据进行增删改查时显得更加优雅、高效。<br></p><div class="note success"><p>官网：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/mybatis" target="_blank" rel="noopener">https://github.com/mybatis</a></p></div><p></p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>&#8195;&#8195;很早就知道分布式服务这个概念，一直也很想学习了解一下。Dubbo 是一个分布式、高性能、透明化的 RPC 服务框架，提供服务自动注册、自动发现等高效服务治理方案。RPC 指的是远程调用协议，也就是说两个服务器交互数据。它能干吗？简单来说，用户发送的请求转交给 Nginx，然后 Nginx 决定将请求发送那个服务器（此处为 Tomcat），然后 Tomcat 将请求发送给 Dubbo，由它来决定继续调用哪个 service 层去数据库读取数据(摘自<a href="https://www.jianshu.com/p/c6553c202da7" target="_blank" rel="noopener">简书博客文章</a>)。<br></p><div class="note success"><p>官网：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/mybatis" target="_blank" rel="noopener">https://github.com/mybatis</a></p></div><p></p><h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><p>&#8195;&#8195;Netty 是由 JBOSS 提供的一个开源的、异步的、基于事件驱动的网络通信框架，用 Netty 可以快速开发高性能、高可靠性的网络服务器和客户端程序，Netty 简化了网络应用的编程开发过程，使开发网络编程变得异常简单。<br></p><div class="note success"><p>官网：<a href="https://netty.io/" target="_blank" rel="noopener">https://netty.io/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/netty/netty" target="_blank" rel="noopener">https://github.com/netty/netty</a></p></div><p></p><h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h3><p>&#8195;&#8195;Apache Shiro是一个强大而灵活的开源安全框架，它干净利落地处理身份认证，授权，企业会话管理和加密。<br></p><div class="note success"><p>官网：<a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/apache/shiro" target="_blank" rel="noopener">https://github.com/apache/shiro</a></p></div><p></p><h3 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h3><p>&#8195;&#8195;EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是 Hibernate 中默认的CacheProvider。它使用的是 JVM 的堆内存，超过内存可以设置缓存到磁盘，企业版的可以使用 JVM 堆外的物理内存。<br></p><div class="note success"><p>官网：<a href="http://www.ehcache.org/" target="_blank" rel="noopener">http://www.ehcache.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/ehcache/ehcache3" target="_blank" rel="noopener">https://github.com/ehcache/ehcache3</a></p></div><p></p><h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><p>&#8195;&#8195;JUnit 是一个 Java 语言的单元测试框架，绝大多数 Java 的开发环境都已经集成了 JUnit 作为其单元测试的工具。<br></p><div class="note success"><p>官网：<a href="https://junit.org" target="_blank" rel="noopener">https://junit.org</a></p></div><div class="note default"><p>源码：<a href="https://github.com/junit-team/" target="_blank" rel="noopener">https://github.com/junit-team/</a></p></div><p></p><h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h3><p>&#8195;&#8195;Log4j 是 Apache 的一个开源日志框架，通过 Log4j 我们可以将程序中的日志信息输出到控制台、文件等来记录日志。作为一个最老牌的日志框架，它现在的主流版本是 Log4j2。Log4j2是重新架构的一款日志框架，抛弃了之前 Log4j 的不足，以及吸取了优秀日志框架 Logback 的设计。<br></p><div class="note success"><p>官网：<a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/</a></p></div><div class="note default"><p>源码：<a href="https://logging.apache.org/log4j/2.x/source-repository.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/source-repository.html</a></p></div><p></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>&#8195;&#8195;前端，是近几年火起来的岗位，听说在以前，并没有“前端”这个岗位称呼，不过好像有叫网页制作的岗位，应该就是现在前端的前身了，工作上只是画画网页页面，实现一些不是很复杂的页面交互功能，在大家看来并不一个值得考虑的岗位。现在不一样了，前端近几年的技术栈更新的特别快，尤其是Node.js,那更是让我喜欢。下面同样也列出一些前端上的技术框架。</p><h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><p>&#8195;&#8195;Node.js是一个Javascript运行环境，是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。简单的说 Node.js 就是运行在服务端的 JavaScript。以上从<a href="https://baike.baidu.com/item/node.js/7567977?fr=aladdin" target="_blank" rel="noopener">百度百科</a>和<a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>借鉴过来混合描述了一下Node.js。<br>&#8195;&#8195;用自己的话简单描述一下 Node.js 吧。首先我们要确定一个正确的概念，Node.js不是JavaScript框架，应该算一个开发平台，这样说吧，安装了Node.js，就可以通过命令行下载目前网络上各种组件依赖，从而搭建起来前端项目。<br></p><div class="note success"><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/nodejs/node/tree/master/lib/internal" target="_blank" rel="noopener">https://github.com/nodejs/node/tree/master/lib/internal</a></p></div><p></p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>&#8195;&#8195;Vue是目前国内比较火的前段框架，是一套构建用户界面的渐进式框架。Vue是我毕业实习所学习的第一个前端框架，上手不难，看着官方文档学习能很快掌握用法。先说说Vue最大的优点就是，相比传统的用Js或者jQuery去操作Dom来进行页面数据的渲染，Vue能直接将数据和Html元素进行连接，实时更新，减少了前端的工作量，光说不如直接去实践。<br></p><div class="note success"><p>官网：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a></p></div><p></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>&#8195;&#8195;StateOfJS 表示，React 拥有JavaScript框架里最大的市场份额，大概占比64.8%。只不过这个框架我没用过，既然这么多人在用，应该也是一个很值得去学习的。<br></p><div class="note success"><p>官网：<a href="https://reactjs.org/" target="_blank" rel="noopener">https://reactjs.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/facebook/react/" target="_blank" rel="noopener">https://github.com/facebook/react/</a></p></div><p></p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>&#8195;&#8195;Redux 是使用最广泛的工具，82％ 的满意率也证明了它的成熟程度。这是JavaScript的数据层工具，之前也没有用过，先记录一下，后续有机会可以学习。<br></p><div class="note success"><p>官网：<a href="https://www.redux.org.cn/" target="_blank" rel="noopener">https://www.redux.org.cn/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">https://github.com/reduxjs/redux</a></p></div><p></p><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><p>&#8195;&#8195;在搭建此博客之前，我并不知道有Hexo这样一个能够快速构建个人博客的前段框架，打算想自己写一个，再一次偶然的机会，我在一些技术贴上看到了一个JavaScript的后盾框架Express，能够用JS语言搭建基于Node.js的后端，这让我眼前一亮，既然目前是前段开发，就心想直接用JS去做一整套包括前后端的个人博客网站吧，而且能根据我自己的需求去设计自己想要的功能。<br>&#8195;&#8195;说做就做了，我一边学习一边实践，陆陆续续经过两三个月实现了一个简单的个人博客。不多说了，后续有时间我将搭建过程写出来分享给大家。<br></p><div class="note success"><p>官网：<a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">http://www.expressjs.com.cn/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/expressjs/express" target="_blank" rel="noopener">https://github.com/expressjs/express</a></p></div><p></p><h3 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h3><p>&#8195;&#8195;调查显示，Mocha 仍然是最常用的单元测试框架。它已经存在了很长一段时间，拥有最大的生态系统。</p><h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><p>&#8195;&#8195;Electron是使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用<br></p><div class="note success"><p>官网：<a href="https://electronjs.org/" target="_blank" rel="noopener">https://electronjs.org/</a></p></div><div class="note default"><p>源码：<a href="https://github.com/electron" target="_blank" rel="noopener">https://github.com/electron</a></p></div><p></p><h2 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h2><p>&#8195;&#8195;以上就是博主搜集的技术框架栈，目前技术更新太快，可能有点不符合现状，仅供参考。<br>&#8195;&#8195;除了编程语言、框架技术，我们还需要了解一下其他的开发有关的东西，如编译器、服务器、版本管理工具等等。。。<br>&#8195;&#8195;编译器博主推荐使用 IntelliJ IDEA ，用过的同学当然最好，没有用过的同学建议早点接触使用，目前对于Java开发来说，这是最好用的编译器了。前端的同学博主推荐使用 Visual Studio Code，这也是博主才开始使用的前段编辑器，之前也听过，一直觉得应该和Sublime差不多，但是一次偶然的机会下载使用了一次，发现其他的编辑器真的不适合我了。<br>&#8195;&#8195;服务器的话，博主建议有条件的同学可以考虑阿里云，比较现在阿里云有一个云翼计划，24岁以下用户自动默认为学生用户，可以购买一年138人民币的服务器，相当实惠(声明，没有给阿里云打广告，只是因为真的喜欢阿里云产品)。服务器系统直接Linux<br>吧，因为WinService和我们所使用的Windows没什么操作上的区别。<br>&#8195;&#8195;版本管理就Git喽，这些网上教程都很多，SVN也可以试着了解一下，可能有些公司内部会有用到。</p><hr><p>&#8195;&#8195;好啦，终于写完了第一篇文章，打小就不喜欢写作文，文采不好，望读者们多见谅！有需要或者有补充的可以留下评论，或者发邮件。<br>&#8195;&#8195;最后，希望能和大家一起进步，IT这一行真的是学无止境！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;&amp;#8195;这是本博客的第一篇文章，不知道是该写点什么东西才好，正好自己平时比较喜欢浏览一些公总号上的技术文章，这两天看到几篇对目前比较前沿的、使用人数较多的(流行的)前后端技术，这里我整合记录一下，算是给自己往后的学习列一个大纲。&lt;br&gt;&lt;img src=&quot;http://aifeier-123.oss-cn-qingdao.aliyuncs.com/aifeieir-Blog/381846_wx.jpg&quot; alt=&quot;图片无法加载&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术列举" scheme="https://www.xujunjie-cv.com/categories/%E6%8A%80%E6%9C%AF%E5%88%97%E4%B8%BE/"/>
    
    
      <category term="Java" scheme="https://www.xujunjie-cv.com/tags/Java/"/>
    
      <category term="前端" scheme="https://www.xujunjie-cv.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
